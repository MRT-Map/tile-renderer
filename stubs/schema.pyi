from _typeshed import Incomplete

class SchemaError(Exception):
    autos: Incomplete
    errors: Incomplete
    def __init__(self, autos, errors: Incomplete | None = ...) -> None: ...
    @property
    def code(self): ...

class SchemaWrongKeyError(SchemaError): ...
class SchemaMissingKeyError(SchemaError): ...
class SchemaOnlyOneAllowedError(SchemaError): ...
class SchemaForbiddenKeyError(SchemaError): ...
class SchemaUnexpectedTypeError(SchemaError): ...

class And:
    def __init__(self, *args, **kw) -> None: ...
    @property
    def args(self): ...
    def validate(self, data, **kwargs): ...

class Or(And):
    only_one: Incomplete
    match_count: int
    def __init__(self, *args, **kwargs) -> None: ...
    def reset(self) -> None: ...
    def validate(self, data, **kwargs): ...

class Regex:
    NAMES: Incomplete
    def __init__(
        self, pattern_str, flags: int = ..., error: Incomplete | None = ...
    ) -> None: ...
    @property
    def pattern_str(self): ...
    def validate(self, data, **kwargs): ...

class Use:
    def __init__(self, callable_, error: Incomplete | None = ...) -> None: ...
    def validate(self, data, **kwargs): ...

class Schema:
    as_reference: Incomplete
    def __init__(
        self,
        schema,
        error: Incomplete | None = ...,
        ignore_extra_keys: bool = ...,
        name: Incomplete | None = ...,
        description: Incomplete | None = ...,
        as_reference: bool = ...,
    ) -> None: ...
    @property
    def schema(self): ...
    @property
    def description(self): ...
    @property
    def name(self): ...
    @property
    def ignore_extra_keys(self): ...
    def is_valid(self, data, **kwargs): ...
    def validate(self, data, **kwargs): ...
    def json_schema(self, schema_id, use_refs: bool = ..., **kwargs): ...

class Optional(Schema):
    default: Incomplete
    key: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def __hash__(self): ...
    def __eq__(self, other): ...
    def reset(self) -> None: ...

class Hook(Schema):
    handler: Incomplete
    key: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...

class Forbidden(Hook):
    def __init__(self, *args, **kwargs) -> None: ...

class Literal:
    def __init__(self, value, description: Incomplete | None = ...) -> None: ...
    @property
    def description(self): ...
    @property
    def schema(self): ...

class Const(Schema):
    def validate(self, data, **kwargs): ...
