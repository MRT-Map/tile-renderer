from _typeshed import Incomplete

def copy(obj, byref: bool = ..., recurse: bool = ...): ...

class obj1:
    def __init__(self) -> None: ...

class obj2:
    def __init__(self) -> None: ...

class obj3:
    super_: Incomplete
    def __init__(self) -> None: ...

def test_super() -> None: ...
def get_trigger(model) -> None: ...

class Machine:
    child: Incomplete
    trigger: Incomplete
    def __init__(self) -> None: ...

class Model: ...

def test_partial() -> None: ...

class Machine2:
    go: Incomplete
    def __init__(self) -> None: ...
    def member(self, model) -> None: ...

class SubMachine(Machine2):
    def __init__(self) -> None: ...

def test_partials() -> None: ...

class obj4:
    a: Incomplete
    b: Incomplete
    def __init__(self) -> None: ...

def test_circular_reference() -> None: ...
def f(): ...
def test_function_cells() -> None: ...
def fib(n): ...
def test_recursive_function() -> None: ...
def collection_function_recursion(): ...
def test_collection_function_recursion() -> None: ...
