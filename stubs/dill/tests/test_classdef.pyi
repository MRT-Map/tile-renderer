from typing import NamedTuple

from _typeshed import Incomplete

class _class:
    def ok(self): ...

class _class2:
    def __call__(self) -> None: ...
    def ok(self): ...

class _newclass:
    def ok(self): ...

class _newclass2:
    def __call__(self) -> None: ...
    def ok(self): ...

class _meta(type): ...

def __call__(self) -> None: ...
def ok(self): ...

o: Incomplete
oc: Incomplete
n: Incomplete
nc: Incomplete
m: Incomplete

def test_class_instances() -> None: ...
def test_class_objects() -> None: ...
def test_specialtypes() -> None: ...

class Z(NamedTuple):
    a: Incomplete
    b: Incomplete

Zi: Incomplete

class X(NamedTuple):
    a: Incomplete
    b: Incomplete

Xi: Incomplete

class Bad(NamedTuple):
    a: Incomplete
    b: Incomplete

Badi: Incomplete

def test_namedtuple() -> None: ...
def test_dtype() -> None: ...
def test_array_nested() -> None: ...
def test_array_subclass(): ...
def test_method_decorator() -> None: ...

class Y:
    y: Incomplete
    def __init__(self, y) -> None: ...

value: int
y: Incomplete

def test_slots() -> None: ...
def test_attr() -> None: ...
def test_metaclass(): ...
