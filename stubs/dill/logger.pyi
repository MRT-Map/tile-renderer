import contextlib
import logging
import os
from typing import TextIO, Union

from _typeshed import Incomplete

class TraceAdapter(logging.LoggerAdapter):
    logger: Incomplete
    def __init__(self, logger) -> None: ...
    def addHandler(self, handler) -> None: ...
    def removeHandler(self, handler) -> None: ...
    def process(self, msg, kwargs): ...
    def trace_setup(self, pickler) -> None: ...
    def trace(self, pickler, msg, *args, **kwargs) -> None: ...

class TraceFormatter(logging.Formatter):
    is_utf8: bool
    def __init__(self, *args, handler: Incomplete | None = ..., **kwargs) -> None: ...
    def format(self, record): ...

logger: Incomplete
adapter: Incomplete

def trace(
    arg: Union[bool, TextIO, str, os.PathLike] = ..., *, mode: str = ...
) -> None: ...

class TraceManager(contextlib.AbstractContextManager):
    file: Incomplete
    mode: Incomplete
    redirect: Incomplete
    file_is_stream: Incomplete
    def __init__(self, file, mode) -> None: ...
    handler: Incomplete
    old_level: Incomplete
    def __enter__(self): ...
    def __exit__(self, *exc_info) -> None: ...
