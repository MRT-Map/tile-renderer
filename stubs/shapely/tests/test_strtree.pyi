from collections.abc import Generator

from _typeshed import Incomplete
from shapely import MultiPoint as MultiPoint
from shapely import Point as Point
from shapely import STRtree as STRtree
from shapely import box as box
from shapely import geos_version as geos_version
from shapely.errors import UnsupportedGEOSVersionError as UnsupportedGEOSVersionError
from shapely.testing import assert_geometries_equal as assert_geometries_equal

from .common import empty as empty
from .common import empty_line_string as empty_line_string
from .common import empty_point as empty_point
from .common import point as point

HALF_UNIT_DIAG: Incomplete
EPS: float

def tree() -> Generator[Incomplete, None, None]: ...
def line_tree() -> Generator[Incomplete, None, None]: ...
def poly_tree() -> Generator[Incomplete, None, None]: ...
def test_init(geometry, count, hits) -> None: ...
def test_init_with_invalid_geometry() -> None: ...
def test_references() -> None: ...
def test_flush_geometries() -> None: ...
def test_geometries_property() -> None: ...
def test_pickle_persistence(tmp_path) -> None: ...
def test_query_invalid_geometry(tree, geometry) -> None: ...
def test_query_invalid_dimension(tree) -> None: ...
def test_query_with_none_and_empty(tree_geometry, geometry, expected) -> None: ...
def test_query_points(tree, geometry, expected) -> None: ...
def test_query_lines(line_tree, geometry, expected) -> None: ...
def test_query_polygons(poly_tree, geometry, expected) -> None: ...
def test_query_invalid_predicate(tree, predicate) -> None: ...
def test_query_prepared_inputs(tree, predicate, expected) -> None: ...
def test_query_with_partially_prepared_inputs(tree) -> None: ...
def test_query_predicate_errors(tree, predicate) -> None: ...
def test_query_intersects_points(tree, geometry, expected) -> None: ...
def test_query_intersects_lines(line_tree, geometry, expected) -> None: ...
def test_query_intersects_polygons(poly_tree, geometry, expected) -> None: ...
def test_query_within_points(tree, geometry, expected) -> None: ...
def test_query_within_lines(line_tree, geometry, expected) -> None: ...
def test_query_within_polygons(poly_tree, geometry, expected) -> None: ...
def test_query_contains_points(tree, geometry, expected) -> None: ...
def test_query_contains_lines(line_tree, geometry, expected) -> None: ...
def test_query_contains_polygons(poly_tree, geometry, expected) -> None: ...
def test_query_overlaps_points(tree, geometry, expected) -> None: ...
def test_query_overlaps_lines(line_tree, geometry, expected) -> None: ...
def test_query_overlaps_polygons(poly_tree, geometry, expected) -> None: ...
def test_query_crosses_points(tree, geometry, expected) -> None: ...
def test_query_crosses_lines(line_tree, geometry, expected) -> None: ...
def test_query_crosses_polygons(poly_tree, geometry, expected) -> None: ...
def test_query_touches_points(tree, geometry, expected) -> None: ...
def test_query_touches_lines(line_tree, geometry, expected) -> None: ...
def test_query_touches_polygons(poly_tree, geometry, expected) -> None: ...
def test_query_covers_points(tree, geometry, expected) -> None: ...
def test_query_covers_lines(line_tree, geometry, expected) -> None: ...
def test_query_covers_polygons(poly_tree, geometry, expected) -> None: ...
def test_query_covered_by_points(tree, geometry, expected) -> None: ...
def test_query_covered_by_lines(line_tree, geometry, expected) -> None: ...
def test_query_covered_by_polygons(poly_tree, geometry, expected) -> None: ...
def test_query_contains_properly_points(tree, geometry, expected) -> None: ...
def test_query_contains_properly_lines(line_tree, geometry, expected) -> None: ...
def test_query_contains_properly_polygons(poly_tree, geometry, expected) -> None: ...
def test_query_dwithin_geos_version(tree, geometry) -> None: ...
def test_query_dwithin_invalid_distance(tree, geometry, distance, match) -> None: ...
def test_query_dwithin_points(tree, geometry, distance, expected) -> None: ...
def test_query_dwithin_lines(line_tree, geometry, distance, expected) -> None: ...
def test_query_dwithin_polygons(poly_tree, geometry, distance, expected) -> None: ...
def test_nearest_empty_tree() -> None: ...
def test_nearest_invalid_geom(tree, geometry) -> None: ...
def test_nearest_none(tree, geometry) -> None: ...
def test_nearest_empty(tree, geometry) -> None: ...
def test_nearest_points(tree, geometry, expected) -> None: ...
def test_nearest_points_equidistant(tree, geometry, expected) -> None: ...
def test_nearest_lines(line_tree, geometry, expected) -> None: ...
def test_nearest_lines_equidistant(line_tree, geometry, expected) -> None: ...
def test_nearest_polygons(poly_tree, geometry, expected) -> None: ...
def test_nearest_polygons_equidistant(poly_tree, geometry, expected) -> None: ...
def test_query_nearest_empty_tree() -> None: ...
def test_query_nearest_invalid_geom(tree, geometry) -> None: ...
def test_query_nearest_none(tree, geometry, return_distance, expected) -> None: ...
def test_query_nearest_empty_geom(tree, geometry, expected) -> None: ...
def test_query_nearest_points(tree, geometry, expected) -> None: ...
def test_query_nearest_lines(line_tree, geometry, expected) -> None: ...
def test_query_nearest_polygons(poly_tree, geometry, expected) -> None: ...
def test_query_nearest_max_distance(tree, geometry, max_distance, expected) -> None: ...
def test_query_nearest_invalid_max_distance(tree, geometry, max_distance) -> None: ...
def test_query_nearest_nonscalar_max_distance(tree) -> None: ...
def test_query_nearest_return_distance(tree, geometry, expected) -> None: ...
def test_query_nearest_exclusive(tree, geometry, exclusive, expected) -> None: ...
def test_query_nearest_exclusive_no_results(tree, geometry, expected) -> None: ...
def test_query_nearest_invalid_exclusive(tree, geometry, exclusive) -> None: ...
def test_query_nearest_invalid_all_matches(tree, geometry, all_matches) -> None: ...
def test_query_nearest_all_matches(tree) -> None: ...
def test_strtree_threaded_query(): ...
