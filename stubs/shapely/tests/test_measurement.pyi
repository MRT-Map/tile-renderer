from shapely import GeometryCollection as GeometryCollection
from shapely import LineString as LineString
from shapely import MultiPoint as MultiPoint
from shapely import Point as Point
from shapely import Polygon as Polygon

from .common import empty as empty
from .common import geometry_collection as geometry_collection
from .common import ignore_invalid as ignore_invalid
from .common import line_string as line_string
from .common import linear_ring as linear_ring
from .common import multi_line_string as multi_line_string
from .common import multi_point as multi_point
from .common import multi_polygon as multi_polygon
from .common import point as point
from .common import point_polygon_testdata as point_polygon_testdata
from .common import polygon as polygon
from .common import polygon_with_hole as polygon_with_hole

def test_area_non_polygon(geom) -> None: ...
def test_area() -> None: ...
def test_distance() -> None: ...
def test_distance_missing() -> None: ...
def test_distance_duplicated() -> None: ...
def test_bounds(geom, expected) -> None: ...
def test_bounds_dimensions(geom, shape) -> None: ...
def test_total_bounds(geom, expected) -> None: ...
def test_total_bounds_dimensions(geom) -> None: ...
def test_length() -> None: ...
def test_length_missing() -> None: ...
def test_hausdorff_distance() -> None: ...
def test_hausdorff_distance_densify() -> None: ...
def test_hausdorff_distance_missing() -> None: ...
def test_hausdorff_densify_nan() -> None: ...
def test_distance_empty() -> None: ...
def test_hausdorff_distance_empty() -> None: ...
def test_hausdorff_distance_densify_empty() -> None: ...
def test_frechet_distance(geom1, geom2, expected) -> None: ...
def test_frechet_distance_densify(geom1, geom2, densify, expected) -> None: ...
def test_frechet_distance_nan_for_invalid_geometry_inputs(geom1, geom2) -> None: ...
def test_frechet_densify_ndarray() -> None: ...
def test_frechet_densify_nan() -> None: ...
def test_frechet_densify_invalid_values(densify) -> None: ...
def test_frechet_distance_densify_empty() -> None: ...
def test_minimum_clearance() -> None: ...
def test_minimum_clearance_nonexistent() -> None: ...
def test_minimum_clearance_missing() -> None: ...
def test_minimum_bounding_radius(geometry, expected) -> None: ...
