from collections.abc import MutableMapping

from _typeshed import Incomplete
from fontTools.misc import sstruct as sstruct
from fontTools.misc.textTools import bytesjoin as bytesjoin
from fontTools.misc.textTools import safeEval as safeEval
from fontTools.ttLib import TTLibError as TTLibError

from . import DefaultTable as DefaultTable

TRAK_HEADER_FORMAT: str
TRAK_HEADER_FORMAT_SIZE: Incomplete
TRACK_DATA_FORMAT: str
TRACK_DATA_FORMAT_SIZE: Incomplete
TRACK_TABLE_ENTRY_FORMAT: str
TRACK_TABLE_ENTRY_FORMAT_SIZE: Incomplete
SIZE_VALUE_FORMAT: str
SIZE_VALUE_FORMAT_SIZE: Incomplete
PER_SIZE_VALUE_FORMAT: str
PER_SIZE_VALUE_FORMAT_SIZE: Incomplete

class table__t_r_a_k(DefaultTable.DefaultTable):
    dependencies: Incomplete
    reserved: int
    def compile(self, ttFont): ...
    def decompile(self, data, ttFont) -> None: ...
    def toXML(self, writer, ttFont) -> None: ...
    version: Incomplete
    format: Incomplete
    def fromXML(self, name, attrs, content, ttFont) -> None: ...

class TrackData(MutableMapping):
    def __init__(self, initialdata=...) -> None: ...
    def compile(self, offset): ...
    def decompile(self, data, offset) -> None: ...
    def toXML(self, writer, ttFont) -> None: ...
    def fromXML(self, name, attrs, content, ttFont) -> None: ...
    def sizes(self): ...
    def __getitem__(self, track): ...
    def __delitem__(self, track) -> None: ...
    def __setitem__(self, track, entry) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def keys(self): ...
    tracks: Incomplete

class TrackTableEntry(MutableMapping):
    nameIndex: Incomplete
    def __init__(self, values=..., nameIndex: Incomplete | None = ...) -> None: ...
    def toXML(self, writer, ttFont) -> None: ...
    track: Incomplete
    def fromXML(self, name, attrs, content, ttFont) -> None: ...
    def __getitem__(self, size): ...
    def __delitem__(self, size) -> None: ...
    def __setitem__(self, size, value) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def keys(self): ...
    sizes: Incomplete
    def __eq__(self, other): ...
    def __ne__(self, other): ...
