from typing import NamedTuple

from _typeshed import Incomplete
from fontTools import ttLib as ttLib
from fontTools import version as version
from fontTools.misc import sstruct as sstruct
from fontTools.misc import xmlWriter as xmlWriter
from fontTools.misc.arrayTools import calcIntBounds as calcIntBounds
from fontTools.misc.arrayTools import pointInRect as pointInRect
from fontTools.misc.bezierTools import calcQuadraticBounds as calcQuadraticBounds
from fontTools.misc.filenames import userNameToFileName as userNameToFileName
from fontTools.misc.fixedTools import otRound as otRound
from fontTools.misc.loggingTools import deprecateFunction as deprecateFunction
from fontTools.misc.textTools import pad as pad
from fontTools.misc.textTools import safeEval as safeEval
from fontTools.misc.textTools import tostr as tostr

from . import DefaultTable as DefaultTable
from . import ttProgram as ttProgram

log: Incomplete
SCALE_COMPONENT_OFFSET_DEFAULT: int

class table__g_l_y_f(DefaultTable.DefaultTable):
    padding: int
    glyphs: Incomplete
    glyphOrder: Incomplete
    def decompile(self, data, ttFont) -> None: ...
    def ensureDecompiled(self, recurse: bool = ...) -> None: ...
    def compile(self, ttFont): ...
    def toXML(self, writer, ttFont, splitGlyphs: bool = ...) -> None: ...
    def fromXML(self, name, attrs, content, ttFont) -> None: ...
    def setGlyphOrder(self, glyphOrder) -> None: ...
    def getGlyphName(self, glyphID): ...
    def getGlyphID(self, glyphName): ...
    def removeHinting(self) -> None: ...
    def keys(self): ...
    def has_key(self, glyphName): ...
    __contains__: Incomplete
    def get(self, glyphName, default: Incomplete | None = ...): ...
    def __getitem__(self, glyphName): ...
    def __setitem__(self, glyphName, glyph) -> None: ...
    def __delitem__(self, glyphName) -> None: ...
    def __len__(self) -> int: ...
    def getPhantomPoints(
        self, glyphName, ttFont, defaultVerticalOrigin: Incomplete | None = ...
    ): ...
    def getCoordinatesAndControls(
        self, glyphName, ttFont, defaultVerticalOrigin: Incomplete | None = ...
    ): ...
    def setCoordinates(self, glyphName, ttFont) -> None: ...

class _GlyphControls(NamedTuple):
    numberOfContours: Incomplete
    endPts: Incomplete
    flags: Incomplete
    components: Incomplete

glyphHeaderFormat: str
flagOnCurve: int
flagXShort: int
flagYShort: int
flagRepeat: int
flagXsame: int
flagYsame: int
flagOverlapSimple: int
flagReserved: int
keepFlags: Incomplete

def flagBest(x, y, onCurve): ...
def flagFits(newFlag, oldFlag, mask): ...
def flagSupports(newFlag, oldFlag): ...
def flagEncodeCoord(flag, mask, coord, coordBytes) -> None: ...
def flagEncodeCoords(flag, x, y, xBytes, yBytes) -> None: ...

ARG_1_AND_2_ARE_WORDS: int
ARGS_ARE_XY_VALUES: int
ROUND_XY_TO_GRID: int
WE_HAVE_A_SCALE: int
NON_OVERLAPPING: int
MORE_COMPONENTS: int
WE_HAVE_AN_X_AND_Y_SCALE: int
WE_HAVE_A_TWO_BY_TWO: int
WE_HAVE_INSTRUCTIONS: int
USE_MY_METRICS: int
OVERLAP_COMPOUND: int
SCALED_COMPONENT_OFFSET: int
UNSCALED_COMPONENT_OFFSET: int

class CompositeMaxpValues(NamedTuple):
    nPoints: Incomplete
    nContours: Incomplete
    maxComponentDepth: Incomplete

class Glyph:
    numberOfContours: int
    data: Incomplete
    def __init__(self, data: bytes = ...) -> None: ...
    def compact(self, glyfTable, recalcBBoxes: bool = ...) -> None: ...
    def expand(self, glyfTable) -> None: ...
    def compile(self, glyfTable, recalcBBoxes: bool = ...): ...
    def toXML(self, writer, ttFont) -> None: ...
    coordinates: Incomplete
    flags: Incomplete
    endPtsOfContours: Incomplete
    components: Incomplete
    program: Incomplete
    def fromXML(self, name, attrs, content, ttFont) -> None: ...
    def getCompositeMaxpValues(self, glyfTable, maxComponentDepth: int = ...): ...
    def getMaxpValues(self): ...
    def decompileComponents(self, data, glyfTable) -> None: ...
    def decompileCoordinates(self, data) -> None: ...
    def decompileCoordinatesRaw(self, nCoordinates, data, pos: int = ...): ...
    def compileComponents(self, glyfTable): ...
    def compileCoordinates(self): ...
    def compileDeltasGreedy(self, flags, deltas): ...
    def compileDeltasOptimal(self, flags, deltas): ...
    def recalcBounds(self, glyfTable) -> None: ...
    def isComposite(self): ...
    def __getitem__(self, componentIndex): ...
    def getCoordinates(self, glyfTable): ...
    def getComponentNames(self, glyfTable): ...
    def trim(self, remove_hinting: bool = ...) -> None: ...
    def removeHinting(self) -> None: ...
    def draw(self, pen, glyfTable, offset: int = ...) -> None: ...
    def drawPoints(self, pen, glyfTable, offset: int = ...) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class GlyphComponent:
    def __init__(self) -> None: ...
    def getComponentInfo(self): ...
    flags: Incomplete
    glyphName: Incomplete
    transform: Incomplete
    def decompile(self, data, glyfTable): ...
    def compile(self, more, haveInstructions, glyfTable): ...
    def toXML(self, writer, ttFont) -> None: ...
    firstPt: Incomplete
    secondPt: Incomplete
    x: Incomplete
    y: Incomplete
    def fromXML(self, name, attrs, content, ttFont) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class GlyphCoordinates:
    def __init__(self, iterable=...) -> None: ...
    @property
    def array(self): ...
    @staticmethod
    def zeros(count): ...
    def copy(self): ...
    def __len__(self) -> int: ...
    def __getitem__(self, k): ...
    def __setitem__(self, k, v) -> None: ...
    def __delitem__(self, i) -> None: ...
    def append(self, p) -> None: ...
    def extend(self, iterable) -> None: ...
    def toInt(self, *, round=...) -> None: ...
    def relativeToAbsolute(self) -> None: ...
    def absoluteToRelative(self) -> None: ...
    def translate(self, p) -> None: ...
    def scale(self, p) -> None: ...
    def transform(self, t) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __pos__(self): ...
    def __neg__(self): ...
    def __round__(self, *, round=...): ...
    def __add__(self, other): ...
    def __sub__(self, other): ...
    def __mul__(self, other): ...
    def __truediv__(self, other): ...
    __radd__: Incomplete
    __rmul__: Incomplete
    def __rsub__(self, other): ...
    def __iadd__(self, other): ...
    def __isub__(self, other): ...
    def __imul__(self, other): ...
    def __itruediv__(self, other): ...
    def __bool__(self) -> bool: ...
    __nonzero__: Incomplete
