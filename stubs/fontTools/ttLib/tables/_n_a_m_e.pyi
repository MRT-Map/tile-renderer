from _typeshed import Incomplete
from fontTools.misc import sstruct as sstruct
from fontTools.misc.encodingTools import getEncoding as getEncoding
from fontTools.misc.textTools import bytechr as bytechr
from fontTools.misc.textTools import byteord as byteord
from fontTools.misc.textTools import bytesjoin as bytesjoin
from fontTools.misc.textTools import safeEval as safeEval
from fontTools.misc.textTools import strjoin as strjoin
from fontTools.misc.textTools import tobytes as tobytes
from fontTools.misc.textTools import tostr as tostr
from fontTools.ttLib import newTable as newTable

from . import DefaultTable as DefaultTable

log: Incomplete
nameRecordFormat: str
nameRecordSize: Incomplete

class table__n_a_m_e(DefaultTable.DefaultTable):
    dependencies: Incomplete
    names: Incomplete
    def decompile(self, data, ttFont) -> None: ...
    def compile(self, ttFont): ...
    def toXML(self, writer, ttFont) -> None: ...
    def fromXML(self, name, attrs, content, ttFont) -> None: ...
    def getName(
        self, nameID, platformID, platEncID, langID: Incomplete | None = ...
    ): ...
    def getDebugName(self, nameID): ...
    def getFirstDebugName(self, nameIDs): ...
    def getBestFamilyName(self): ...
    def getBestSubFamilyName(self): ...
    def getBestFullName(self): ...
    def setName(self, string, nameID, platformID, platEncID, langID) -> None: ...
    def removeNames(
        self,
        nameID: Incomplete | None = ...,
        platformID: Incomplete | None = ...,
        platEncID: Incomplete | None = ...,
        langID: Incomplete | None = ...,
    ) -> None: ...
    def findMultilingualName(
        self, names, windows: bool = ..., mac: bool = ..., minNameID: int = ...
    ): ...
    def addMultilingualName(
        self,
        names,
        ttFont: Incomplete | None = ...,
        nameID: Incomplete | None = ...,
        windows: bool = ...,
        mac: bool = ...,
        minNameID: int = ...,
    ): ...
    def addName(self, string, platforms=..., minNameID: int = ...): ...

def makeName(string, nameID, platformID, platEncID, langID): ...

class NameRecord:
    def getEncoding(self, default: str = ...): ...
    def encodingIsUnicodeCompatible(self): ...
    def isUnicode(self): ...
    def toUnicode(self, errors: str = ...): ...
    def toBytes(self, errors: str = ...): ...
    toStr: Incomplete
    def toXML(self, writer, ttFont) -> None: ...
    nameID: Incomplete
    platformID: Incomplete
    platEncID: Incomplete
    langID: Incomplete
    string: Incomplete
    def fromXML(self, name, attrs, content, ttFont) -> None: ...
    def __lt__(self, other): ...
