from _typeshed import Incomplete
from fontTools import ttLib as ttLib
from fontTools.misc import sstruct as sstruct
from fontTools.misc.textTools import bytechr as bytechr
from fontTools.misc.textTools import byteord as byteord
from fontTools.misc.textTools import readHex as readHex
from fontTools.misc.textTools import safeEval as safeEval
from fontTools.misc.textTools import tobytes as tobytes
from fontTools.misc.textTools import tostr as tostr
from fontTools.ttLib.standardGlyphOrder import standardGlyphOrder as standardGlyphOrder

from . import DefaultTable as DefaultTable

log: Incomplete
postFormat: str
postFormatSize: Incomplete

class table__p_o_s_t(DefaultTable.DefaultTable):
    def decompile(self, data, ttFont) -> None: ...
    def compile(self, ttFont): ...
    def getGlyphOrder(self): ...
    glyphOrder: Incomplete
    def decode_format_1_0(self, data, ttFont) -> None: ...
    extraNames: Incomplete
    def decode_format_2_0(self, data, ttFont) -> None: ...
    mapping: Incomplete
    def build_psNameMapping(self, ttFont) -> None: ...
    def decode_format_3_0(self, data, ttFont) -> None: ...
    def decode_format_4_0(self, data, ttFont) -> None: ...
    def encode_format_2_0(self, ttFont): ...
    def encode_format_4_0(self, ttFont): ...
    def toXML(self, writer, ttFont) -> None: ...
    data: Incomplete
    def fromXML(self, name, attrs, content, ttFont) -> None: ...

def unpackPStrings(data, n): ...
def packPStrings(strings): ...
