from itertools import zip_longest as zip_longest
from typing import Optional

from _typeshed import Incomplete
from fontTools.misc.roundTools import (
    nearestMultipleShortestRepr as nearestMultipleShortestRepr,
)
from fontTools.misc.roundTools import otRound as otRound
from fontTools.misc.textTools import bytesjoin as bytesjoin
from fontTools.misc.textTools import pad as pad
from fontTools.misc.textTools import safeEval as safeEval
from fontTools.misc.textTools import tobytes as tobytes
from fontTools.misc.textTools import tostr as tostr
from fontTools.ttLib import getSearchRange as getSearchRange
from UserList import UserList

from .otBase import CountReference as CountReference
from .otBase import FormatSwitchingBaseTable as FormatSwitchingBaseTable
from .otBase import OTTableReader as OTTableReader
from .otBase import OTTableWriter as OTTableWriter
from .otBase import ValueRecordFactory as ValueRecordFactory
from .otTables import NO_VARIATION_INDEX as NO_VARIATION_INDEX
from .otTables import AATAction as AATAction
from .otTables import AATState as AATState
from .otTables import AATStateTable as AATStateTable
from .otTables import ContextualMorphAction as ContextualMorphAction
from .otTables import InsertionMorphAction as InsertionMorphAction
from .otTables import LigatureMorphAction as LigatureMorphAction
from .otTables import MorxSubtable as MorxSubtable
from .otTables import lookupTypes as lookupTypes

log: Incomplete
istuple: Incomplete

def buildConverters(tableSpec, tableNamespace): ...

class _MissingItem(tuple): ...

class _LazyList(UserList):
    def __getslice__(self, i, j): ...
    def __getitem__(self, k): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...

class BaseConverter:
    name: Incomplete
    repeat: Incomplete
    aux: Incomplete
    tableClass: Incomplete
    isCount: Incomplete
    isLookupType: Incomplete
    isPropagated: Incomplete
    description: Incomplete
    def __init__(
        self,
        name,
        repeat,
        aux,
        tableClass: Incomplete | None = ...,
        *,
        description: str = ...
    ) -> None: ...
    def readArray(self, reader, font, tableDict, count): ...
    def getRecordSize(self, reader): ...
    def read(self, reader, font, tableDict) -> None: ...
    def writeArray(self, writer, font, tableDict, values) -> None: ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...
    def xmlRead(self, attrs, content, font) -> None: ...
    def xmlWrite(self, xmlWriter, font, value, name, attrs) -> None: ...
    varIndexBasePlusOffsetRE: Incomplete
    def getVarIndexOffset(self) -> Optional[int]: ...

class SimpleValue(BaseConverter):
    @staticmethod
    def toString(value): ...
    @staticmethod
    def fromString(value): ...
    def xmlWrite(self, xmlWriter, font, value, name, attrs) -> None: ...
    def xmlRead(self, attrs, content, font): ...

class OptionalValue(SimpleValue):
    DEFAULT: Incomplete
    def xmlWrite(self, xmlWriter, font, value, name, attrs) -> None: ...
    def xmlRead(self, attrs, content, font): ...

class IntValue(SimpleValue):
    @staticmethod
    def fromString(value): ...

class Long(IntValue):
    staticSize: int
    def read(self, reader, font, tableDict): ...
    def readArray(self, reader, font, tableDict, count): ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...
    def writeArray(self, writer, font, tableDict, values) -> None: ...

class ULong(IntValue):
    staticSize: int
    def read(self, reader, font, tableDict): ...
    def readArray(self, reader, font, tableDict, count): ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...
    def writeArray(self, writer, font, tableDict, values) -> None: ...

class Flags32(ULong):
    @staticmethod
    def toString(value): ...

class VarIndex(OptionalValue, ULong):
    DEFAULT: Incomplete

class Short(IntValue):
    staticSize: int
    def read(self, reader, font, tableDict): ...
    def readArray(self, reader, font, tableDict, count): ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...
    def writeArray(self, writer, font, tableDict, values) -> None: ...

class UShort(IntValue):
    staticSize: int
    def read(self, reader, font, tableDict): ...
    def readArray(self, reader, font, tableDict, count): ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...
    def writeArray(self, writer, font, tableDict, values) -> None: ...

class Int8(IntValue):
    staticSize: int
    def read(self, reader, font, tableDict): ...
    def readArray(self, reader, font, tableDict, count): ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...
    def writeArray(self, writer, font, tableDict, values) -> None: ...

class UInt8(IntValue):
    staticSize: int
    def read(self, reader, font, tableDict): ...
    def readArray(self, reader, font, tableDict, count): ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...
    def writeArray(self, writer, font, tableDict, values) -> None: ...

class UInt24(IntValue):
    staticSize: int
    def read(self, reader, font, tableDict): ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...

class ComputedInt(IntValue):
    def xmlWrite(self, xmlWriter, font, value, name, attrs) -> None: ...

class ComputedUInt8(ComputedInt, UInt8): ...
class ComputedUShort(ComputedInt, UShort): ...
class ComputedULong(ComputedInt, ULong): ...

class Tag(SimpleValue):
    staticSize: int
    def read(self, reader, font, tableDict): ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...

class GlyphID(SimpleValue):
    staticSize: int
    typecode: str
    def readArray(self, reader, font, tableDict, count): ...
    def read(self, reader, font, tableDict): ...
    def writeArray(self, writer, font, tableDict, values) -> None: ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...

class GlyphID32(GlyphID):
    staticSize: int
    typecode: str

class NameID(UShort):
    def xmlWrite(self, xmlWriter, font, value, name, attrs) -> None: ...

class STATFlags(UShort):
    def xmlWrite(self, xmlWriter, font, value, name, attrs) -> None: ...

class FloatValue(SimpleValue):
    @staticmethod
    def fromString(value): ...

class DeciPoints(FloatValue):
    staticSize: int
    def read(self, reader, font, tableDict): ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...

class BaseFixedValue(FloatValue):
    staticSize: Incomplete
    precisionBits: Incomplete
    readerMethod: Incomplete
    writerMethod: Incomplete
    def read(self, reader, font, tableDict): ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...
    @classmethod
    def fromInt(cls, value): ...
    @classmethod
    def toInt(cls, value): ...
    @classmethod
    def fromString(cls, value): ...
    @classmethod
    def toString(cls, value): ...

class Fixed(BaseFixedValue):
    staticSize: int
    precisionBits: int
    readerMethod: str
    writerMethod: str

class F2Dot14(BaseFixedValue):
    staticSize: int
    precisionBits: int
    readerMethod: str
    writerMethod: str

class Angle(F2Dot14):
    bias: float
    factor: Incomplete
    @classmethod
    def fromInt(cls, value): ...
    @classmethod
    def toInt(cls, value): ...
    @classmethod
    def fromString(cls, value): ...
    @classmethod
    def toString(cls, value): ...

class BiasedAngle(Angle):
    bias: float

class Version(SimpleValue):
    staticSize: int
    def read(self, reader, font, tableDict): ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...
    @staticmethod
    def fromString(value): ...
    @staticmethod
    def toString(value): ...
    @staticmethod
    def fromFloat(v): ...

class Char64(SimpleValue):
    staticSize: int
    def read(self, reader, font, tableDict): ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...

class Struct(BaseConverter):
    def getRecordSize(self, reader): ...
    def read(self, reader, font, tableDict): ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...
    def xmlWrite(self, xmlWriter, font, value, name, attrs) -> None: ...
    def xmlRead(self, attrs, content, font): ...

class StructWithLength(Struct):
    def read(self, reader, font, tableDict): ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...

class Table(Struct):
    staticSize: int
    def readOffset(self, reader): ...
    def writeNullOffset(self, writer) -> None: ...
    def read(self, reader, font, tableDict): ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...

class LTable(Table):
    staticSize: int
    def readOffset(self, reader): ...
    def writeNullOffset(self, writer) -> None: ...

class Table24(Table):
    staticSize: int
    def readOffset(self, reader): ...
    def writeNullOffset(self, writer) -> None: ...

class SubStruct(Struct):
    def getConverter(self, tableType, lookupType): ...
    def xmlWrite(self, xmlWriter, font, value, name, attrs) -> None: ...

class SubTable(Table):
    def getConverter(self, tableType, lookupType): ...
    def xmlWrite(self, xmlWriter, font, value, name, attrs) -> None: ...

class ExtSubTable(LTable, SubTable):
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...

class FeatureParams(Table):
    def getConverter(self, featureTag): ...

class ValueFormat(IntValue):
    staticSize: int
    which: Incomplete
    def __init__(
        self,
        name,
        repeat,
        aux,
        tableClass: Incomplete | None = ...,
        *,
        description: str = ...
    ) -> None: ...
    def read(self, reader, font, tableDict): ...
    def write(
        self, writer, font, tableDict, format, repeatIndex: Incomplete | None = ...
    ) -> None: ...

class ValueRecord(ValueFormat):
    def getRecordSize(self, reader): ...
    def read(self, reader, font, tableDict): ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...
    def xmlWrite(self, xmlWriter, font, value, name, attrs) -> None: ...
    def xmlRead(self, attrs, content, font): ...

class AATLookup(BaseConverter):
    BIN_SEARCH_HEADER_SIZE: int
    converter: Incomplete
    def __init__(
        self, name, repeat, aux, tableClass, *, description: str = ...
    ) -> None: ...
    def read(self, reader, font, tableDict): ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...
    @staticmethod
    def writeBinSearchHeader(writer, numUnits, unitSize) -> None: ...
    def buildFormat0(self, writer, font, values): ...
    def writeFormat0(self, writer, font, values) -> None: ...
    def buildFormat2(self, writer, font, values): ...
    def writeFormat2(self, writer, font, segments) -> None: ...
    def buildFormat6(self, writer, font, values): ...
    def writeFormat6(self, writer, font, values) -> None: ...
    def buildFormat8(self, writer, font, values): ...
    def writeFormat8(self, writer, font, values) -> None: ...
    def readFormat0(self, reader, font): ...
    def readFormat2(self, reader, font): ...
    def readFormat4(self, reader, font): ...
    def readFormat6(self, reader, font): ...
    def readFormat8(self, reader, font): ...
    def xmlRead(self, attrs, content, font): ...
    def xmlWrite(self, xmlWriter, font, value, name, attrs) -> None: ...

class AATLookupWithDataOffset(BaseConverter):
    def read(self, reader, font, tableDict): ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...
    def xmlRead(self, attrs, content, font): ...
    def xmlWrite(self, xmlWriter, font, value, name, attrs) -> None: ...

class MorxSubtableConverter(BaseConverter):
    def __init__(
        self,
        name,
        repeat,
        aux,
        tableClass: Incomplete | None = ...,
        *,
        description: str = ...
    ) -> None: ...
    def read(self, reader, font, tableDict): ...
    def xmlWrite(self, xmlWriter, font, value, name, attrs) -> None: ...
    def xmlRead(self, attrs, content, font): ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...

class STXHeader(BaseConverter):
    classLookup: Incomplete
    perGlyphLookup: Incomplete
    def __init__(
        self, name, repeat, aux, tableClass, *, description: str = ...
    ) -> None: ...
    def read(self, reader, font, tableDict): ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...
    def xmlWrite(self, xmlWriter, font, value, name, attrs) -> None: ...
    def xmlRead(self, attrs, content, font): ...

class CIDGlyphMap(BaseConverter):
    def read(self, reader, font, tableDict): ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...
    def xmlRead(self, attrs, content, font): ...
    def xmlWrite(self, xmlWriter, font, value, name, attrs) -> None: ...

class GlyphCIDMap(BaseConverter):
    def read(self, reader, font, tableDict): ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...
    def xmlRead(self, attrs, content, font): ...
    def xmlWrite(self, xmlWriter, font, value, name, attrs) -> None: ...

class DeltaValue(BaseConverter):
    def read(self, reader, font, tableDict): ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...
    def xmlWrite(self, xmlWriter, font, value, name, attrs) -> None: ...
    def xmlRead(self, attrs, content, font): ...

class VarIdxMapValue(BaseConverter):
    def read(self, reader, font, tableDict): ...
    def write(
        self, writer, font, tableDict, value, repeatIndex: Incomplete | None = ...
    ) -> None: ...

class VarDataValue(BaseConverter):
    def read(self, reader, font, tableDict): ...
    def write(
        self, writer, font, tableDict, values, repeatIndex: Incomplete | None = ...
    ) -> None: ...
    def xmlWrite(self, xmlWriter, font, value, name, attrs) -> None: ...
    def xmlRead(self, attrs, content, font): ...

class LookupFlag(UShort):
    def xmlWrite(self, xmlWriter, font, value, name, attrs) -> None: ...

class _UInt8Enum(UInt8):
    enumClass: Incomplete
    def read(self, reader, font, tableDict): ...
    @classmethod
    def fromString(cls, value): ...
    @classmethod
    def toString(cls, value): ...

class ExtendMode(_UInt8Enum):
    enumClass: Incomplete

class CompositeMode(_UInt8Enum):
    enumClass: Incomplete

converterMapping: Incomplete
