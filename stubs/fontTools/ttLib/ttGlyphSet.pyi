import abc
from abc import ABC, abstractmethod
from collections.abc import Mapping

from _typeshed import Incomplete
from fontTools.misc.fixedTools import otRound as otRound
from fontTools.misc.loggingTools import deprecateFunction as deprecateFunction

class _TTGlyphSet(Mapping, metaclass=abc.ABCMeta):
    font: Incomplete
    location: Incomplete
    glyphsMapping: Incomplete
    hMetrics: Incomplete
    vMetrics: Incomplete
    hvarTable: Incomplete
    hvarInstancer: Incomplete
    def __init__(self, font, location, glyphsMapping) -> None: ...
    def __contains__(self, glyphName) -> bool: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def has_key(self, glyphName): ...

class _TTGlyphSetGlyf(_TTGlyphSet):
    glyfTable: Incomplete
    gvarTable: Incomplete
    def __init__(self, font, location) -> None: ...
    def __getitem__(self, glyphName): ...

class _TTGlyphSetCFF(_TTGlyphSet):
    charStrings: Incomplete
    blender: Incomplete
    def __init__(self, font, location) -> None: ...
    def __getitem__(self, glyphName): ...

class _TTGlyph(ABC, metaclass=abc.ABCMeta):
    glyphSet: Incomplete
    name: Incomplete
    def __init__(self, glyphSet, glyphName) -> None: ...
    @abstractmethod
    def draw(self, pen): ...
    def drawPoints(self, pen) -> None: ...

class _TTGlyphGlyf(_TTGlyph):
    def draw(self, pen) -> None: ...
    def drawPoints(self, pen) -> None: ...

class _TTGlyphCFF(_TTGlyph):
    def draw(self, pen) -> None: ...
