from _typeshed import Incomplete
from fontTools.config import Config as Config
from fontTools.misc import xmlWriter as xmlWriter
from fontTools.misc.configTools import AbstractConfig as AbstractConfig
from fontTools.misc.loggingTools import deprecateArgument as deprecateArgument
from fontTools.misc.textTools import Tag as Tag
from fontTools.misc.textTools import byteord as byteord
from fontTools.misc.textTools import tostr as tostr
from fontTools.ttLib import TTLibError as TTLibError
from fontTools.ttLib.sfnt import SFNTReader as SFNTReader
from fontTools.ttLib.sfnt import SFNTWriter as SFNTWriter

log: Incomplete

class TTFont:
    lazy: Incomplete
    recalcBBoxes: Incomplete
    recalcTimestamp: Incomplete
    tables: Incomplete
    reader: Incomplete
    cfg: Incomplete
    ignoreDecompileErrors: Incomplete
    sfntVersion: Incomplete
    flavor: Incomplete
    flavorData: Incomplete
    def __init__(
        self,
        file: Incomplete | None = ...,
        res_name_or_index: Incomplete | None = ...,
        sfntVersion: str = ...,
        flavor: Incomplete | None = ...,
        checkChecksums: int = ...,
        verbose: Incomplete | None = ...,
        recalcBBoxes: bool = ...,
        allowVID=...,
        ignoreDecompileErrors: bool = ...,
        recalcTimestamp: bool = ...,
        fontNumber: int = ...,
        lazy: Incomplete | None = ...,
        quiet: Incomplete | None = ...,
        _tableCache: Incomplete | None = ...,
        cfg=...,
    ) -> None: ...
    def __enter__(self): ...
    def __exit__(self, type, value, traceback) -> None: ...
    def close(self) -> None: ...
    def save(self, file, reorderTables: bool = ...) -> None: ...
    def saveXML(self, fileOrPath, newlinestr: str = ..., **kwargs) -> None: ...
    def importXML(self, fileOrPath, quiet: Incomplete | None = ...) -> None: ...
    def isLoaded(self, tag): ...
    def has_key(self, tag): ...
    __contains__: Incomplete
    def keys(self): ...
    def ensureDecompiled(self, recurse: Incomplete | None = ...) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, tag): ...
    def __setitem__(self, tag, table) -> None: ...
    def __delitem__(self, tag) -> None: ...
    def get(self, tag, default: Incomplete | None = ...): ...
    glyphOrder: Incomplete
    def setGlyphOrder(self, glyphOrder) -> None: ...
    def getGlyphOrder(self): ...
    def getGlyphNames(self): ...
    def getGlyphNames2(self): ...
    def getGlyphName(self, glyphID): ...
    def getGlyphNameMany(self, lst): ...
    def getGlyphID(self, glyphName): ...
    def getGlyphIDMany(self, lst): ...
    def getReverseGlyphMap(self, rebuild: bool = ...): ...
    def getTableData(self, tag): ...
    def getGlyphSet(
        self,
        preferCFF: bool = ...,
        location: Incomplete | None = ...,
        normalized: bool = ...,
    ): ...
    def normalizeLocation(self, location): ...
    def getBestCmap(self, cmapPreferences=...): ...

class GlyphOrder:
    def __init__(self, tag: Incomplete | None = ...) -> None: ...
    def toXML(self, writer, ttFont) -> None: ...
    glyphOrder: Incomplete
    def fromXML(self, name, attrs, content, ttFont) -> None: ...

def getTableModule(tag): ...
def registerCustomTableClass(
    tag, moduleName, className: Incomplete | None = ...
) -> None: ...
def unregisterCustomTableClass(tag) -> None: ...
def getCustomTableClass(tag): ...
def getTableClass(tag): ...
def getClassTag(klass): ...
def newTable(tag): ...
def tagToIdentifier(tag): ...
def identifierToTag(ident): ...
def tagToXML(tag): ...
def xmlToTag(tag): ...

TTFTableOrder: Incomplete
OTFTableOrder: Incomplete

def sortedTagList(tagList, tableOrder: Incomplete | None = ...): ...
def reorderFontTables(
    inFile, outFile, tableOrder: Incomplete | None = ..., checkChecksums: bool = ...
) -> None: ...
def maxPowerOfTwo(x): ...
def getSearchRange(n, itemSize: int = ...): ...
