from _typeshed import Incomplete
from fontTools.misc import eexec as eexec
from fontTools.misc.textTools import bytechr as bytechr
from fontTools.misc.textTools import byteord as byteord
from fontTools.misc.textTools import bytesjoin as bytesjoin
from fontTools.misc.textTools import tobytes as tobytes
from fontTools.misc.textTools import tostr as tostr

from .psOperators import PSOperators as PSOperators
from .psOperators import ps_array as ps_array
from .psOperators import ps_boolean as ps_boolean
from .psOperators import ps_dict as ps_dict
from .psOperators import ps_integer as ps_integer
from .psOperators import ps_literal as ps_literal
from .psOperators import ps_mark as ps_mark
from .psOperators import ps_name as ps_name
from .psOperators import ps_operator as ps_operator
from .psOperators import ps_procedure as ps_procedure
from .psOperators import ps_procmark as ps_procmark
from .psOperators import ps_real as ps_real
from .psOperators import ps_StandardEncoding as ps_StandardEncoding
from .psOperators import ps_string as ps_string

log: Incomplete
ps_special: bytes
skipwhiteRE: Incomplete
endofthingPat: Incomplete
endofthingRE: Incomplete
commentRE: Incomplete
stringPat: bytes
stringRE: Incomplete
hexstringRE: Incomplete

class PSTokenError(Exception): ...
class PSError(Exception): ...

class PSTokenizer:
    buf: Incomplete
    len: Incomplete
    pos: int
    closed: bool
    encoding: Incomplete
    def __init__(self, buf: bytes = ..., encoding: str = ...) -> None: ...
    def read(self, n: int = ...): ...
    def close(self) -> None: ...
    def getnexttoken(
        self,
        len=...,
        ps_special=...,
        stringmatch=...,
        hexstringmatch=...,
        commentmatch=...,
        endmatch=...,
    ): ...
    def skipwhite(self, whitematch=...) -> None: ...
    dirtybuf: Incomplete
    def starteexec(self) -> None: ...
    def stopeexec(self) -> None: ...

class PSInterpreter(PSOperators):
    encoding: Incomplete
    dictstack: Incomplete
    stack: Incomplete
    proclevel: int
    procmark: Incomplete
    def __init__(self, encoding: str = ...) -> None: ...
    def fillsystemdict(self) -> None: ...
    def suckoperators(self, systemdict, klass) -> None: ...
    tokenizer: Incomplete
    def interpret(self, data, getattr=...) -> None: ...
    def handle_object(self, object) -> None: ...
    def call_procedure(self, proc) -> None: ...
    def resolve_name(self, name): ...
    def do_token(
        self, token, int=..., float=..., ps_name=..., ps_integer=..., ps_real=...
    ): ...
    def do_comment(self, token) -> None: ...
    def do_literal(self, token): ...
    def do_string(self, token): ...
    def do_hexstring(self, token): ...
    def do_special(self, token): ...
    def push(self, object) -> None: ...
    def pop(self, *types): ...
    def do_makearray(self) -> None: ...
    def close(self) -> None: ...

def unpack_item(item): ...
def suckfont(data, encoding: str = ...): ...
