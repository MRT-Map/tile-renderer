from typing import NamedTuple

from _typeshed import Incomplete

class Intersection(NamedTuple):
    pt: Incomplete
    t1: Incomplete
    t2: Incomplete

def calcCubicArcLength(pt1, pt2, pt3, pt4, tolerance: float = ...): ...
def calcCubicArcLengthC(pt1, pt2, pt3, pt4, tolerance: float = ...): ...
def calcQuadraticArcLength(pt1, pt2, pt3): ...
def calcQuadraticArcLengthC(pt1, pt2, pt3): ...
def approximateQuadraticArcLength(pt1, pt2, pt3): ...
def approximateQuadraticArcLengthC(pt1, pt2, pt3): ...
def calcQuadraticBounds(pt1, pt2, pt3): ...
def approximateCubicArcLength(pt1, pt2, pt3, pt4): ...
def approximateCubicArcLengthC(pt1, pt2, pt3, pt4): ...
def calcCubicBounds(pt1, pt2, pt3, pt4): ...
def splitLine(pt1, pt2, where, isHorizontal): ...
def splitQuadratic(pt1, pt2, pt3, where, isHorizontal): ...
def splitCubic(pt1, pt2, pt3, pt4, where, isHorizontal): ...
def splitQuadraticAtT(pt1, pt2, pt3, *ts): ...
def splitCubicAtT(pt1, pt2, pt3, pt4, *ts): ...
def solveQuadratic(a, b, c, sqrt=...): ...
def solveCubic(a, b, c, d): ...
def linePointAtT(pt1, pt2, t): ...
def quadraticPointAtT(pt1, pt2, pt3, t): ...
def cubicPointAtT(pt1, pt2, pt3, pt4, t): ...
def segmentPointAtT(seg, t): ...
def lineLineIntersections(s1, e1, s2, e2): ...
def curveLineIntersections(curve, line): ...
def curveCurveIntersections(curve1, curve2): ...
def segmentSegmentIntersections(seg1, seg2): ...
