from _typeshed import Incomplete
from fontTools.misc.fixedTools import fixedToFloat as fixedToFloat
from fontTools.misc.fixedTools import floatToFixed as floatToFixed
from fontTools.misc.fixedTools import floatToFixedToStr as floatToFixedToStr
from fontTools.misc.fixedTools import strToFixedToFloat as strToFixedToFloat
from fontTools.misc.textTools import bytechr as bytechr
from fontTools.misc.textTools import byteord as byteord
from fontTools.misc.textTools import bytesjoin as bytesjoin
from fontTools.misc.textTools import strjoin as strjoin
from fontTools.pens.boundsPen import BoundsPen as BoundsPen

log: Incomplete

def read_operator(self, b0, data, index): ...
def read_byte(self, b0, data, index): ...
def read_smallInt1(self, b0, data, index): ...
def read_smallInt2(self, b0, data, index): ...
def read_shortInt(self, b0, data, index): ...
def read_longInt(self, b0, data, index): ...
def read_fixed1616(self, b0, data, index): ...
def read_reserved(self, b0, data, index): ...
def read_realNumber(self, b0, data, index): ...

t1OperandEncoding: Incomplete
t2OperandEncoding: Incomplete
cffDictOperandEncoding: Incomplete
realNibbles: Incomplete
realNibblesDict: Incomplete
maxOpStack: int

def buildOperatorDict(operatorList): ...

t2Operators: Incomplete

def getIntEncoder(format): ...

encodeIntCFF: Incomplete
encodeIntT1: Incomplete
encodeIntT2: Incomplete

def encodeFixed(f, pack=...): ...

realZeroBytes: Incomplete

def encodeFloat(f): ...

class CharStringCompileError(Exception): ...

class SimpleT2Decompiler:
    localSubrs: Incomplete
    localBias: Incomplete
    globalSubrs: Incomplete
    globalBias: Incomplete
    private: Incomplete
    blender: Incomplete
    def __init__(
        self,
        localSubrs,
        globalSubrs,
        private: Incomplete | None = ...,
        blender: Incomplete | None = ...,
    ) -> None: ...
    callingStack: Incomplete
    operandStack: Incomplete
    hintCount: int
    hintMaskBytes: int
    numRegions: int
    vsIndex: int
    def reset(self) -> None: ...
    def execute(self, charString) -> None: ...
    def pop(self): ...
    def popall(self): ...
    def push(self, value) -> None: ...
    def op_return(self, index) -> None: ...
    def op_endchar(self, index) -> None: ...
    def op_ignore(self, index) -> None: ...
    def op_callsubr(self, index) -> None: ...
    def op_callgsubr(self, index) -> None: ...
    def op_hstem(self, index) -> None: ...
    def op_vstem(self, index) -> None: ...
    def op_hstemhm(self, index) -> None: ...
    def op_vstemhm(self, index) -> None: ...
    def op_hintmask(self, index): ...
    op_cntrmask: Incomplete
    def countHints(self) -> None: ...
    def op_and(self, index) -> None: ...
    def op_or(self, index) -> None: ...
    def op_not(self, index) -> None: ...
    def op_store(self, index) -> None: ...
    def op_abs(self, index) -> None: ...
    def op_add(self, index) -> None: ...
    def op_sub(self, index) -> None: ...
    def op_div(self, index) -> None: ...
    def op_load(self, index) -> None: ...
    def op_neg(self, index) -> None: ...
    def op_eq(self, index) -> None: ...
    def op_drop(self, index) -> None: ...
    def op_put(self, index) -> None: ...
    def op_get(self, index) -> None: ...
    def op_ifelse(self, index) -> None: ...
    def op_random(self, index) -> None: ...
    def op_mul(self, index) -> None: ...
    def op_sqrt(self, index) -> None: ...
    def op_dup(self, index) -> None: ...
    def op_exch(self, index) -> None: ...
    def op_index(self, index) -> None: ...
    def op_roll(self, index) -> None: ...
    def op_blend(self, index) -> None: ...
    def op_vsindex(self, index) -> None: ...

t1Operators: Incomplete

class T2WidthExtractor(SimpleT2Decompiler):
    nominalWidthX: Incomplete
    defaultWidthX: Incomplete
    def __init__(
        self,
        localSubrs,
        globalSubrs,
        nominalWidthX,
        defaultWidthX,
        private: Incomplete | None = ...,
        blender: Incomplete | None = ...,
    ) -> None: ...
    gotWidth: int
    width: int
    def reset(self) -> None: ...
    def popallWidth(self, evenOdd: int = ...): ...
    hintCount: Incomplete
    def countHints(self) -> None: ...
    def op_rmoveto(self, index) -> None: ...
    def op_hmoveto(self, index) -> None: ...
    def op_vmoveto(self, index) -> None: ...
    def op_endchar(self, index) -> None: ...

class T2OutlineExtractor(T2WidthExtractor):
    pen: Incomplete
    subrLevel: int
    def __init__(
        self,
        pen,
        localSubrs,
        globalSubrs,
        nominalWidthX,
        defaultWidthX,
        private: Incomplete | None = ...,
        blender: Incomplete | None = ...,
    ) -> None: ...
    currentPoint: Incomplete
    sawMoveTo: int
    def reset(self) -> None: ...
    def execute(self, charString) -> None: ...
    def rMoveTo(self, point) -> None: ...
    def rLineTo(self, point) -> None: ...
    def rCurveTo(self, pt1, pt2, pt3) -> None: ...
    def closePath(self) -> None: ...
    def endPath(self) -> None: ...
    def op_rmoveto(self, index) -> None: ...
    def op_hmoveto(self, index) -> None: ...
    def op_vmoveto(self, index) -> None: ...
    def op_endchar(self, index) -> None: ...
    def op_rlineto(self, index) -> None: ...
    def op_hlineto(self, index) -> None: ...
    def op_vlineto(self, index) -> None: ...
    def op_rrcurveto(self, index) -> None: ...
    def op_rcurveline(self, index) -> None: ...
    def op_rlinecurve(self, index) -> None: ...
    def op_vvcurveto(self, index) -> None: ...
    def op_hhcurveto(self, index) -> None: ...
    def op_vhcurveto(self, index) -> None: ...
    def op_hvcurveto(self, index) -> None: ...
    def op_hflex(self, index) -> None: ...
    def op_flex(self, index) -> None: ...
    def op_hflex1(self, index) -> None: ...
    def op_flex1(self, index) -> None: ...
    def op_and(self, index) -> None: ...
    def op_or(self, index) -> None: ...
    def op_not(self, index) -> None: ...
    def op_store(self, index) -> None: ...
    def op_abs(self, index) -> None: ...
    def op_add(self, index) -> None: ...
    def op_sub(self, index) -> None: ...
    def op_div(self, index) -> None: ...
    def op_load(self, index) -> None: ...
    def op_neg(self, index) -> None: ...
    def op_eq(self, index) -> None: ...
    def op_drop(self, index) -> None: ...
    def op_put(self, index) -> None: ...
    def op_get(self, index) -> None: ...
    def op_ifelse(self, index) -> None: ...
    def op_random(self, index) -> None: ...
    def op_mul(self, index) -> None: ...
    def op_sqrt(self, index) -> None: ...
    def op_dup(self, index) -> None: ...
    def op_exch(self, index) -> None: ...
    def op_index(self, index) -> None: ...
    def op_roll(self, index) -> None: ...
    def alternatingLineto(self, isHorizontal) -> None: ...
    def vcurveto(self, args): ...
    def hcurveto(self, args): ...

class T1OutlineExtractor(T2OutlineExtractor):
    pen: Incomplete
    subrs: Incomplete
    def __init__(self, pen, subrs) -> None: ...
    flexing: int
    width: int
    sbx: int
    def reset(self) -> None: ...
    sawMoveTo: int
    def endPath(self) -> None: ...
    def popallWidth(self, evenOdd: int = ...): ...
    def exch(self) -> None: ...
    def op_rmoveto(self, index) -> None: ...
    def op_hmoveto(self, index) -> None: ...
    def op_vmoveto(self, index) -> None: ...
    def op_closepath(self, index) -> None: ...
    currentPoint: Incomplete
    def op_setcurrentpoint(self, index) -> None: ...
    def op_endchar(self, index) -> None: ...
    def op_hsbw(self, index) -> None: ...
    def op_sbw(self, index) -> None: ...
    def op_callsubr(self, index) -> None: ...
    def op_callothersubr(self, index) -> None: ...
    def op_pop(self, index) -> None: ...
    def doFlex(self) -> None: ...
    def op_dotsection(self, index) -> None: ...
    def op_hstem3(self, index) -> None: ...
    def op_seac(self, index) -> None: ...
    def op_vstem3(self, index) -> None: ...

class T2CharString:
    operandEncoding: Incomplete
    operators: Incomplete
    opcodes: Incomplete
    decompilerClass: Incomplete
    outlineExtractor: Incomplete
    bytecode: Incomplete
    program: Incomplete
    private: Incomplete
    globalSubrs: Incomplete
    def __init__(
        self,
        bytecode: Incomplete | None = ...,
        program: Incomplete | None = ...,
        private: Incomplete | None = ...,
        globalSubrs: Incomplete | None = ...,
    ) -> None: ...
    def getNumRegions(self, vsindex: Incomplete | None = ...): ...
    def getIntEncoder(self): ...
    def getFixedEncoder(self): ...
    def decompile(self) -> None: ...
    width: Incomplete
    def draw(self, pen, blender: Incomplete | None = ...) -> None: ...
    def calcBounds(self, glyphSet): ...
    def compile(self, isCFF2: bool = ...) -> None: ...
    def needsDecompilation(self): ...
    def setProgram(self, program) -> None: ...
    def setBytecode(self, bytecode) -> None: ...
    def getToken(self, index, len=..., byteord=..., isinstance=...): ...
    def getBytes(self, index, nBytes): ...
    def handle_operator(self, operator): ...
    def toXML(self, xmlWriter, ttFont: Incomplete | None = ...) -> None: ...
    def fromXML(self, name, attrs, content) -> None: ...

class T1CharString(T2CharString):
    operandEncoding: Incomplete
    operators: Incomplete
    opcodes: Incomplete
    subrs: Incomplete
    def __init__(
        self,
        bytecode: Incomplete | None = ...,
        program: Incomplete | None = ...,
        subrs: Incomplete | None = ...,
    ) -> None: ...
    def getIntEncoder(self): ...
    def getFixedEncoder(self) -> None: ...
    def decompile(self) -> None: ...
    width: Incomplete
    def draw(self, pen) -> None: ...

class DictDecompiler:
    operandEncoding: Incomplete
    stack: Incomplete
    strings: Incomplete
    dict: Incomplete
    parent: Incomplete
    def __init__(self, strings, parent: Incomplete | None = ...) -> None: ...
    def getDict(self): ...
    def decompile(self, data) -> None: ...
    def pop(self): ...
    def popall(self): ...
    def handle_operator(self, operator) -> None: ...
    def arg_number(self, name): ...
    def arg_blend_number(self, name): ...
    def arg_SID(self, name): ...
    def arg_array(self, name): ...
    def arg_blendList(self, name): ...
    def arg_delta(self, name): ...

def calcSubrBias(subrs): ...
