from _typeshed import Incomplete
from fontTools.misc.textTools import byteord as byteord
from fontTools.misc.textTools import strjoin as strjoin
from fontTools.misc.textTools import tobytes as tobytes
from fontTools.misc.textTools import tostr as tostr

INDENT: str

class XMLWriter:
    filename: Incomplete
    file: Incomplete
    totype: Incomplete
    indentwhite: Incomplete
    newlinestr: Incomplete
    indentlevel: int
    stack: Incomplete
    needindent: int
    idlefunc: Incomplete
    idlecounter: int
    def __init__(
        self,
        fileOrPath,
        indentwhite=...,
        idlefunc: Incomplete | None = ...,
        encoding: str = ...,
        newlinestr: str = ...,
    ) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exception_type, exception_value, traceback) -> None: ...
    def close(self) -> None: ...
    def write(self, string, indent: bool = ...) -> None: ...
    def writecdata(self, string) -> None: ...
    def write8bit(self, data, strip: bool = ...) -> None: ...
    def write_noindent(self, string) -> None: ...
    def newline(self) -> None: ...
    def comment(self, data) -> None: ...
    def simpletag(self, _TAG_, *args, **kwargs) -> None: ...
    def begintag(self, _TAG_, *args, **kwargs) -> None: ...
    def endtag(self, _TAG_) -> None: ...
    def dumphex(self, data) -> None: ...
    def indent(self) -> None: ...
    def dedent(self) -> None: ...
    def stringifyattrs(self, *args, **kwargs): ...

def escape(data): ...
def escapeattr(data): ...
def escape8bit(data): ...
def hexStr(s): ...
