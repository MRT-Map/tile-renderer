import logging

from _typeshed import Incomplete

TIME_LEVEL: Incomplete
DEFAULT_FORMATS: Incomplete

class LevelFormatter(logging.Formatter):
    default_format: Incomplete
    custom_formats: Incomplete
    def __init__(
        self,
        fmt: Incomplete | None = ...,
        datefmt: Incomplete | None = ...,
        style: str = ...,
    ) -> None: ...
    def format(self, record): ...

def configLogger(**kwargs) -> None: ...

class Timer:
    default_msg: str
    default_format: str
    logger: Incomplete
    level: Incomplete
    msg: Incomplete
    def __init__(
        self,
        logger: Incomplete | None = ...,
        msg: Incomplete | None = ...,
        level: Incomplete | None = ...,
        start: Incomplete | None = ...,
    ) -> None: ...
    start: Incomplete
    last: Incomplete
    elapsed: float
    def reset(self, start: Incomplete | None = ...) -> None: ...
    def time(self): ...
    def split(self): ...
    def formatTime(self, msg, time): ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, traceback) -> None: ...
    def __call__(self, func_or_msg: Incomplete | None = ..., **kwargs): ...
    def __float__(self) -> float: ...
    def __int__(self) -> int: ...

class ChannelsFilter(logging.Filter):
    names: Incomplete
    num: Incomplete
    lengths: Incomplete
    def __init__(self, *names) -> None: ...
    def filter(self, record): ...

class CapturingLogHandler(logging.Handler):
    records: Incomplete
    logger: Incomplete
    def __init__(self, logger, level) -> None: ...
    original_disabled: Incomplete
    original_level: Incomplete
    original_propagate: Incomplete
    def __enter__(self): ...
    def __exit__(self, type, value, traceback): ...
    def emit(self, record) -> None: ...
    def assertRegex(self, regexp, msg: Incomplete | None = ...): ...

class LogMixin:
    @property
    def log(self): ...

def deprecateArgument(name, msg, category=...) -> None: ...
def deprecateFunction(msg, category=...): ...
