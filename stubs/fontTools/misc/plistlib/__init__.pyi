from datetime import datetime
from numbers import Integral
from typing import IO, Any, Mapping, MutableMapping, Optional, Sequence, Type, Union

from _typeshed import Incomplete
from fontTools.misc import etree as etree
from fontTools.misc.textTools import tostr as tostr

USE_BUILTIN_TYPES: bool
XML_DECLARATION: bytes
PLIST_DOCTYPE: bytes

class Data:
    data: Incomplete
    def __init__(self, data: bytes) -> None: ...
    @classmethod
    def fromBase64(cls, data: Union[bytes, str]) -> Data: ...
    def asBase64(self, maxlinelength: int = ..., indent_level: int = ...) -> bytes: ...
    def __eq__(self, other: Any) -> bool: ...

PlistEncodable = Union[
    bool, bytes, Data, datetime, float, Integral, Mapping[str, Any], Sequence[Any], str
]

class PlistTarget:
    stack: Incomplete
    current_key: Incomplete
    root: Incomplete
    def __init__(
        self,
        use_builtin_types: Optional[bool] = ...,
        dict_type: Type[MutableMapping[str, Any]] = ...,
    ) -> None: ...
    def start(self, tag: str, attrib: Mapping[str, str]) -> None: ...
    def end(self, tag: str) -> None: ...
    def data(self, data: str) -> None: ...
    def close(self) -> PlistEncodable: ...
    def add_object(self, value: PlistEncodable) -> None: ...
    def get_data(self) -> str: ...

def start_dict(self) -> None: ...
def end_dict(self) -> None: ...
def end_key(self) -> None: ...
def start_array(self) -> None: ...
def end_array(self) -> None: ...
def end_true(self) -> None: ...
def end_false(self) -> None: ...
def end_integer(self) -> None: ...
def end_real(self) -> None: ...
def end_string(self) -> None: ...
def end_data(self) -> None: ...
def end_date(self) -> None: ...
def totree(
    value: PlistEncodable,
    sort_keys: bool = ...,
    skipkeys: bool = ...,
    use_builtin_types: Optional[bool] = ...,
    pretty_print: bool = ...,
    indent_level: int = ...,
) -> etree.Element: ...
def fromtree(
    tree: etree.Element,
    use_builtin_types: Optional[bool] = ...,
    dict_type: Type[MutableMapping[str, Any]] = ...,
) -> Any: ...
def load(
    fp: IO[bytes],
    use_builtin_types: Optional[bool] = ...,
    dict_type: Type[MutableMapping[str, Any]] = ...,
) -> Any: ...
def loads(
    value: bytes,
    use_builtin_types: Optional[bool] = ...,
    dict_type: Type[MutableMapping[str, Any]] = ...,
) -> Any: ...
def dump(
    value: PlistEncodable,
    fp: IO[bytes],
    sort_keys: bool = ...,
    skipkeys: bool = ...,
    use_builtin_types: Optional[bool] = ...,
    pretty_print: bool = ...,
) -> None: ...
def dumps(
    value: PlistEncodable,
    sort_keys: bool = ...,
    skipkeys: bool = ...,
    use_builtin_types: Optional[bool] = ...,
    pretty_print: bool = ...,
) -> bytes: ...
