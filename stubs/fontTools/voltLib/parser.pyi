from _typeshed import Incomplete
from fontTools.voltLib.error import VoltLibError as VoltLibError
from fontTools.voltLib.lexer import Lexer as Lexer

PARSE_FUNCS: Incomplete

class Parser:
    doc_: Incomplete
    glyphs_: Incomplete
    groups_: Incomplete
    anchors_: Incomplete
    scripts_: Incomplete
    langs_: Incomplete
    lookups_: Incomplete
    next_token_location_: Incomplete
    def __init__(self, path) -> None: ...
    lexer_: Incomplete
    def make_lexer_(self, file_or_path) -> None: ...
    def parse(self): ...
    def parse_def_glyph_(self): ...
    def parse_def_group_(self): ...
    def parse_def_script_(self): ...
    def parse_langsys_(self): ...
    def parse_feature_(self): ...
    def parse_def_lookup_(self): ...
    def parse_context_(self): ...
    def parse_substitution_(self, reversal): ...
    def parse_position_(self): ...
    def parse_attach_(self): ...
    def parse_attach_cursive_(self): ...
    def parse_adjust_pair_(self): ...
    def parse_adjust_single_(self): ...
    def parse_def_anchor_(self): ...
    def parse_adjust_by_(self): ...
    def parse_pos_(self): ...
    def parse_unicode_values_(self): ...
    def parse_enum_(self): ...
    def parse_coverage_(self): ...
    def resolve_group(self, group_name): ...
    def glyph_range(self, start, end): ...
    def parse_ppem_(self): ...
    def parse_noarg_option_(self): ...
    def parse_cmap_format(self): ...
    def is_cur_keyword_(self, k): ...
    def expect_string_(self): ...
    def expect_keyword_(self, keyword): ...
    def expect_name_(self): ...
    def expect_number_(self): ...
    def advance_lexer_(self) -> None: ...

class SymbolTable:
    scopes_: Incomplete
    def __init__(self) -> None: ...
    def enter_scope(self) -> None: ...
    def exit_scope(self) -> None: ...
    def define(self, name, item) -> None: ...
    def resolve(self, name, case_insensitive: bool = ...): ...

class OrderedSymbolTable(SymbolTable):
    scopes_: Incomplete
    def __init__(self) -> None: ...
    def enter_scope(self) -> None: ...
    def resolve(self, name, case_insensitive: bool = ...) -> None: ...
    def range(self, start, end): ...
