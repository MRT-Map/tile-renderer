from _typeshed import Incomplete

class Element:
    location: Incomplete
    def __init__(self, location: Incomplete | None = ...) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...) -> None: ...

class Statement(Element): ...
class Expression(Element): ...

class Comment(Element):
    text: Incomplete
    def __init__(self, text, location: Incomplete | None = ...) -> None: ...
    def asFea(self, indent: str = ...): ...

class NullGlyph(Expression):
    def __init__(self, location: Incomplete | None = ...) -> None: ...
    def glyphSet(self): ...
    def asFea(self, indent: str = ...): ...

class GlyphName(Expression):
    glyph: Incomplete
    def __init__(self, glyph, location: Incomplete | None = ...) -> None: ...
    def glyphSet(self): ...
    def asFea(self, indent: str = ...): ...

class GlyphClass(Expression):
    glyphs: Incomplete
    original: Incomplete
    curr: int
    def __init__(
        self, glyphs: Incomplete | None = ..., location: Incomplete | None = ...
    ) -> None: ...
    def glyphSet(self): ...
    def asFea(self, indent: str = ...): ...
    def extend(self, glyphs) -> None: ...
    def append(self, glyph) -> None: ...
    def add_range(self, start, end, glyphs) -> None: ...
    def add_cid_range(self, start, end, glyphs) -> None: ...
    def add_class(self, gc) -> None: ...

class GlyphClassName(Expression):
    glyphclass: Incomplete
    def __init__(self, glyphclass, location: Incomplete | None = ...) -> None: ...
    def glyphSet(self): ...
    def asFea(self, indent: str = ...): ...

class MarkClassName(Expression):
    markClass: Incomplete
    def __init__(self, markClass, location: Incomplete | None = ...) -> None: ...
    def glyphSet(self): ...
    def asFea(self, indent: str = ...): ...

class AnonymousBlock(Statement):
    tag: Incomplete
    content: Incomplete
    def __init__(self, tag, content, location: Incomplete | None = ...) -> None: ...
    def asFea(self, indent: str = ...): ...

class Block(Statement):
    statements: Incomplete
    def __init__(self, location: Incomplete | None = ...) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class FeatureFile(Block):
    markClasses: Incomplete
    def __init__(self) -> None: ...
    def asFea(self, indent: str = ...): ...

class FeatureBlock(Block):
    def __init__(
        self, name, use_extension: bool = ..., location: Incomplete | None = ...
    ) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class NestedBlock(Block):
    tag: Incomplete
    block_name: Incomplete
    def __init__(self, tag, block_name, location: Incomplete | None = ...) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class LookupBlock(Block):
    def __init__(
        self, name, use_extension: bool = ..., location: Incomplete | None = ...
    ) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class TableBlock(Block):
    name: Incomplete
    def __init__(self, name, location: Incomplete | None = ...) -> None: ...
    def asFea(self, indent: str = ...): ...

class GlyphClassDefinition(Statement):
    name: Incomplete
    glyphs: Incomplete
    def __init__(self, name, glyphs, location: Incomplete | None = ...) -> None: ...
    def glyphSet(self): ...
    def asFea(self, indent: str = ...): ...

class GlyphClassDefStatement(Statement):
    ligatureGlyphs: Incomplete
    componentGlyphs: Incomplete
    def __init__(
        self,
        baseGlyphs,
        markGlyphs,
        ligatureGlyphs,
        componentGlyphs,
        location: Incomplete | None = ...,
    ) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class MarkClass:
    name: Incomplete
    definitions: Incomplete
    glyphs: Incomplete
    def __init__(self, name) -> None: ...
    def addDefinition(self, definition) -> None: ...
    def glyphSet(self): ...
    def asFea(self, indent: str = ...): ...

class MarkClassDefinition(Statement):
    def __init__(
        self, markClass, anchor, glyphs, location: Incomplete | None = ...
    ) -> None: ...
    def glyphSet(self): ...
    def asFea(self, indent: str = ...): ...

class AlternateSubstStatement(Statement):
    replacement: Incomplete
    def __init__(
        self, prefix, glyph, suffix, replacement, location: Incomplete | None = ...
    ) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class Anchor(Expression):
    name: Incomplete
    def __init__(
        self,
        x,
        y,
        name: Incomplete | None = ...,
        contourpoint: Incomplete | None = ...,
        xDeviceTable: Incomplete | None = ...,
        yDeviceTable: Incomplete | None = ...,
        location: Incomplete | None = ...,
    ) -> None: ...
    def asFea(self, indent: str = ...): ...

class AnchorDefinition(Statement):
    def __init__(
        self,
        name,
        x,
        y,
        contourpoint: Incomplete | None = ...,
        location: Incomplete | None = ...,
    ) -> None: ...
    def asFea(self, indent: str = ...): ...

class AttachStatement(Statement):
    glyphs: Incomplete
    contourPoints: Incomplete
    def __init__(
        self, glyphs, contourPoints, location: Incomplete | None = ...
    ) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class ChainContextPosStatement(Statement):
    lookups: Incomplete
    def __init__(
        self, prefix, glyphs, suffix, lookups, location: Incomplete | None = ...
    ) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class ChainContextSubstStatement(Statement):
    lookups: Incomplete
    def __init__(
        self, prefix, glyphs, suffix, lookups, location: Incomplete | None = ...
    ) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class CursivePosStatement(Statement):
    glyphclass: Incomplete
    def __init__(
        self, glyphclass, entryAnchor, exitAnchor, location: Incomplete | None = ...
    ) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class FeatureReferenceStatement(Statement):
    def __init__(self, featureName, location: Incomplete | None = ...) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class IgnorePosStatement(Statement):
    chainContexts: Incomplete
    def __init__(self, chainContexts, location: Incomplete | None = ...) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class IgnoreSubstStatement(Statement):
    chainContexts: Incomplete
    def __init__(self, chainContexts, location: Incomplete | None = ...) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class IncludeStatement(Statement):
    filename: Incomplete
    def __init__(self, filename, location: Incomplete | None = ...) -> None: ...
    def build(self) -> None: ...
    def asFea(self, indent: str = ...): ...

class LanguageStatement(Statement):
    language: Incomplete
    include_default: Incomplete
    required: Incomplete
    def __init__(
        self,
        language,
        include_default: bool = ...,
        required: bool = ...,
        location: Incomplete | None = ...,
    ) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class LanguageSystemStatement(Statement):
    def __init__(self, script, language, location: Incomplete | None = ...) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class FontRevisionStatement(Statement):
    revision: Incomplete
    def __init__(self, revision, location: Incomplete | None = ...) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class LigatureCaretByIndexStatement(Statement):
    def __init__(self, glyphs, carets, location: Incomplete | None = ...) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class LigatureCaretByPosStatement(Statement):
    def __init__(self, glyphs, carets, location: Incomplete | None = ...) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class LigatureSubstStatement(Statement):
    def __init__(
        self,
        prefix,
        glyphs,
        suffix,
        replacement,
        forceChain,
        location: Incomplete | None = ...,
    ) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class LookupFlagStatement(Statement):
    value: Incomplete
    markAttachment: Incomplete
    markFilteringSet: Incomplete
    def __init__(
        self,
        value: int = ...,
        markAttachment: Incomplete | None = ...,
        markFilteringSet: Incomplete | None = ...,
        location: Incomplete | None = ...,
    ) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class LookupReferenceStatement(Statement):
    def __init__(self, lookup, location: Incomplete | None = ...) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class MarkBasePosStatement(Statement):
    def __init__(self, base, marks, location: Incomplete | None = ...) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class MarkLigPosStatement(Statement):
    def __init__(self, ligatures, marks, location: Incomplete | None = ...) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class MarkMarkPosStatement(Statement):
    def __init__(self, baseMarks, marks, location: Incomplete | None = ...) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class MultipleSubstStatement(Statement):
    replacement: Incomplete
    forceChain: Incomplete
    def __init__(
        self,
        prefix,
        glyph,
        suffix,
        replacement,
        forceChain: bool = ...,
        location: Incomplete | None = ...,
    ) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class PairPosStatement(Statement):
    enumerated: Incomplete
    def __init__(
        self,
        glyphs1,
        valuerecord1,
        glyphs2,
        valuerecord2,
        enumerated: bool = ...,
        location: Incomplete | None = ...,
    ) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class ReverseChainSingleSubstStatement(Statement):
    glyphs: Incomplete
    replacements: Incomplete
    def __init__(
        self,
        old_prefix,
        old_suffix,
        glyphs,
        replacements,
        location: Incomplete | None = ...,
    ) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class SingleSubstStatement(Statement):
    forceChain: Incomplete
    glyphs: Incomplete
    replacements: Incomplete
    def __init__(
        self,
        glyphs,
        replace,
        prefix,
        suffix,
        forceChain,
        location: Incomplete | None = ...,
    ) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class ScriptStatement(Statement):
    script: Incomplete
    def __init__(self, script, location: Incomplete | None = ...) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class SinglePosStatement(Statement):
    forceChain: Incomplete
    def __init__(
        self, pos, prefix, suffix, forceChain, location: Incomplete | None = ...
    ) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class SubtableStatement(Statement):
    def __init__(self, location: Incomplete | None = ...) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class ValueRecord(Expression):
    vertical: Incomplete
    def __init__(
        self,
        xPlacement: Incomplete | None = ...,
        yPlacement: Incomplete | None = ...,
        xAdvance: Incomplete | None = ...,
        yAdvance: Incomplete | None = ...,
        xPlaDevice: Incomplete | None = ...,
        yPlaDevice: Incomplete | None = ...,
        xAdvDevice: Incomplete | None = ...,
        yAdvDevice: Incomplete | None = ...,
        vertical: bool = ...,
        location: Incomplete | None = ...,
    ) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...
    def asFea(self, indent: str = ...): ...
    def __bool__(self) -> bool: ...
    __nonzero__: Incomplete

class ValueRecordDefinition(Statement):
    name: Incomplete
    value: Incomplete
    def __init__(self, name, value, location: Incomplete | None = ...) -> None: ...
    def asFea(self, indent: str = ...): ...

class NameRecord(Statement):
    nameID: Incomplete
    platformID: Incomplete
    platEncID: Incomplete
    langID: Incomplete
    string: Incomplete
    def __init__(
        self,
        nameID,
        platformID,
        platEncID,
        langID,
        string,
        location: Incomplete | None = ...,
    ) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class FeatureNameStatement(NameRecord):
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class STATNameStatement(NameRecord):
    def asFea(self, indent: str = ...): ...

class SizeParameters(Statement):
    DesignSize: Incomplete
    SubfamilyID: Incomplete
    RangeStart: Incomplete
    RangeEnd: Incomplete
    def __init__(
        self,
        DesignSize,
        SubfamilyID,
        RangeStart,
        RangeEnd,
        location: Incomplete | None = ...,
    ) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class CVParametersNameStatement(NameRecord):
    block_name: Incomplete
    def __init__(
        self,
        nameID,
        platformID,
        platEncID,
        langID,
        string,
        block_name,
        location: Incomplete | None = ...,
    ) -> None: ...
    nameID: Incomplete
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class CharacterStatement(Statement):
    character: Incomplete
    tag: Incomplete
    def __init__(self, character, tag, location: Incomplete | None = ...) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class BaseAxis(Statement):
    bases: Incomplete
    scripts: Incomplete
    vertical: Incomplete
    def __init__(
        self, bases, scripts, vertical, location: Incomplete | None = ...
    ) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class OS2Field(Statement):
    key: Incomplete
    value: Incomplete
    def __init__(self, key, value, location: Incomplete | None = ...) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class HheaField(Statement):
    key: Incomplete
    value: Incomplete
    def __init__(self, key, value, location: Incomplete | None = ...) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class VheaField(Statement):
    key: Incomplete
    value: Incomplete
    def __init__(self, key, value, location: Incomplete | None = ...) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class STATDesignAxisStatement(Statement):
    tag: Incomplete
    axisOrder: Incomplete
    names: Incomplete
    location: Incomplete
    def __init__(
        self, tag, axisOrder, names, location: Incomplete | None = ...
    ) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class ElidedFallbackName(Statement):
    names: Incomplete
    location: Incomplete
    def __init__(self, names, location: Incomplete | None = ...) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class ElidedFallbackNameID(Statement):
    value: Incomplete
    location: Incomplete
    def __init__(self, value, location: Incomplete | None = ...) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class STATAxisValueStatement(Statement):
    names: Incomplete
    locations: Incomplete
    flags: Incomplete
    def __init__(
        self, names, locations, flags, location: Incomplete | None = ...
    ) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...

class AxisValueLocationStatement(Statement):
    tag: Incomplete
    values: Incomplete
    def __init__(self, tag, values, location: Incomplete | None = ...) -> None: ...
    def asFea(self, res: str = ...): ...

class ConditionsetStatement(Statement):
    name: Incomplete
    conditions: Incomplete
    def __init__(self, name, conditions, location: Incomplete | None = ...) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, res: str = ..., indent: str = ...): ...

class VariationBlock(Block):
    def __init__(
        self,
        name,
        conditionset,
        use_extension: bool = ...,
        location: Incomplete | None = ...,
    ) -> None: ...
    def build(self, builder) -> None: ...
    def asFea(self, indent: str = ...): ...
