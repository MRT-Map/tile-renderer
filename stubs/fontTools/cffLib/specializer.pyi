from collections.abc import Generator

from _typeshed import Incomplete
from fontTools.cffLib import maxStackLimit as maxStackLimit

def stringToProgram(string): ...
def programToString(program): ...
def programToCommands(program, getNumRegions: Incomplete | None = ...): ...
def commandsToProgram(commands): ...

class _GeneralizerDecombinerCommandsMap:
    @staticmethod
    def rmoveto(args) -> Generator[Incomplete, None, None]: ...
    @staticmethod
    def hmoveto(args) -> Generator[Incomplete, None, None]: ...
    @staticmethod
    def vmoveto(args) -> Generator[Incomplete, None, None]: ...
    @staticmethod
    def rlineto(args) -> Generator[Incomplete, None, None]: ...
    @staticmethod
    def hlineto(args) -> Generator[Incomplete, None, None]: ...
    @staticmethod
    def vlineto(args) -> Generator[Incomplete, None, None]: ...
    @staticmethod
    def rrcurveto(args) -> Generator[Incomplete, None, None]: ...
    @staticmethod
    def hhcurveto(args) -> Generator[Incomplete, None, None]: ...
    @staticmethod
    def vvcurveto(args) -> Generator[Incomplete, None, None]: ...
    @staticmethod
    def hvcurveto(args) -> Generator[Incomplete, None, None]: ...
    @staticmethod
    def vhcurveto(args) -> Generator[Incomplete, None, None]: ...
    @staticmethod
    def rcurveline(args) -> Generator[Incomplete, None, None]: ...
    @staticmethod
    def rlinecurve(args) -> Generator[Incomplete, None, None]: ...

def generalizeCommands(commands, ignoreErrors: bool = ...): ...
def generalizeProgram(program, getNumRegions: Incomplete | None = ..., **kwargs): ...
def specializeCommands(
    commands,
    ignoreErrors: bool = ...,
    generalizeFirst: bool = ...,
    preserveTopology: bool = ...,
    maxstack: int = ...,
): ...
def specializeProgram(program, getNumRegions: Incomplete | None = ..., **kwargs): ...
