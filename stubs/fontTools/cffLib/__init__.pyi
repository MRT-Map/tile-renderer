from _typeshed import Incomplete
from fontTools.misc import psCharStrings as psCharStrings
from fontTools.misc import sstruct as sstruct
from fontTools.misc.arrayTools import intRect as intRect
from fontTools.misc.arrayTools import unionRect as unionRect
from fontTools.misc.textTools import bytechr as bytechr
from fontTools.misc.textTools import byteord as byteord
from fontTools.misc.textTools import bytesjoin as bytesjoin
from fontTools.misc.textTools import safeEval as safeEval
from fontTools.misc.textTools import tobytes as tobytes
from fontTools.misc.textTools import tostr as tostr
from fontTools.ttLib import TTFont as TTFont
from fontTools.ttLib.tables.otBase import OTTableReader as OTTableReader
from fontTools.ttLib.tables.otBase import OTTableWriter as OTTableWriter

DEBUG: Incomplete
log: Incomplete
cffHeaderFormat: str
maxStackLimit: int

class StopHintCountEvent(Exception): ...

class _DesubroutinizingT2Decompiler(psCharStrings.SimpleT2Decompiler):
    stop_hintcount_ops: Incomplete
    def __init__(
        self, localSubrs, globalSubrs, private: Incomplete | None = ...
    ) -> None: ...
    need_hintcount: bool
    def execute(self, charString) -> None: ...
    def op_callsubr(self, index) -> None: ...
    def op_callgsubr(self, index) -> None: ...
    def stop_hint_count(self, *args) -> None: ...
    def op_hintmask(self, index) -> None: ...
    def processSubr(self, index, subr) -> None: ...

class CFFFontSet:
    otFont: Incomplete
    offSize: Incomplete
    fontNames: Incomplete
    topDictIndex: Incomplete
    strings: Incomplete
    topDictSize: Incomplete
    GlobalSubrs: Incomplete
    def decompile(self, file, otFont, isCFF2: Incomplete | None = ...) -> None: ...
    def __len__(self) -> int: ...
    def keys(self): ...
    def values(self): ...
    def __getitem__(self, nameOrIndex): ...
    hdrSize: int
    def compile(self, file, otFont, isCFF2: Incomplete | None = ...) -> None: ...
    def toXML(self, xmlWriter) -> None: ...
    major: int
    minor: int
    def fromXML(
        self, name, attrs, content, otFont: Incomplete | None = ...
    ) -> None: ...
    def convertCFFToCFF2(self, otFont) -> None: ...
    def desubroutinize(self) -> None: ...

class CFFWriter:
    data: Incomplete
    isCFF2: Incomplete
    def __init__(self, isCFF2) -> None: ...
    def add(self, table) -> None: ...
    topDictSize: Incomplete
    offSize: Incomplete
    def toFile(self, file) -> None: ...

def calcOffSize(largestOffset): ...

class IndexCompiler:
    isCFF2: Incomplete
    items: Incomplete
    parent: Incomplete
    def __init__(
        self, items, strings, parent, isCFF2: Incomplete | None = ...
    ) -> None: ...
    def getItems(self, items, strings): ...
    def getOffsets(self): ...
    def getDataLength(self): ...
    def toFile(self, file) -> None: ...

class IndexedStringsCompiler(IndexCompiler):
    def getItems(self, items, strings): ...

class TopDictIndexCompiler(IndexCompiler):
    def getItems(self, items, strings): ...
    def getChildren(self, strings): ...
    def getOffsets(self): ...
    def getDataLength(self): ...
    def toFile(self, file) -> None: ...

class FDArrayIndexCompiler(IndexCompiler):
    def getItems(self, items, strings): ...
    def getChildren(self, strings): ...
    def toFile(self, file) -> None: ...
    def setPos(self, pos, endPos) -> None: ...

class GlobalSubrsCompiler(IndexCompiler):
    def getItems(self, items, strings): ...

class SubrsCompiler(GlobalSubrsCompiler):
    def setPos(self, pos, endPos) -> None: ...

class CharStringsCompiler(GlobalSubrsCompiler):
    def getItems(self, items, strings): ...
    def setPos(self, pos, endPos) -> None: ...

class Index:
    compilerClass: Incomplete
    items: Incomplete
    file: Incomplete
    offsets: Incomplete
    offsetBase: Incomplete
    def __init__(
        self, file: Incomplete | None = ..., isCFF2: Incomplete | None = ...
    ) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index): ...
    def __setitem__(self, index, item) -> None: ...
    def produceItem(self, index, data, file, offset): ...
    def append(self, item) -> None: ...
    def getCompiler(self, strings, parent, isCFF2: Incomplete | None = ...): ...
    def clear(self) -> None: ...

class GlobalSubrsIndex(Index):
    compilerClass: Incomplete
    subrClass: Incomplete
    charStringClass: Incomplete
    globalSubrs: Incomplete
    private: Incomplete
    fdSelect: Incomplete
    fdArray: Incomplete
    def __init__(
        self,
        file: Incomplete | None = ...,
        globalSubrs: Incomplete | None = ...,
        private: Incomplete | None = ...,
        fdSelect: Incomplete | None = ...,
        fdArray: Incomplete | None = ...,
        isCFF2: Incomplete | None = ...,
    ) -> None: ...
    def produceItem(self, index, data, file, offset): ...
    def toXML(self, xmlWriter) -> None: ...
    def fromXML(self, name, attrs, content) -> None: ...
    def getItemAndSelector(self, index): ...

class SubrsIndex(GlobalSubrsIndex):
    compilerClass: Incomplete

class TopDictIndex(Index):
    compilerClass: Incomplete
    cff2GetGlyphOrder: Incomplete
    items: Incomplete
    file: Incomplete
    offsets: Incomplete
    offsetBase: Incomplete
    def __init__(
        self,
        file: Incomplete | None = ...,
        cff2GetGlyphOrder: Incomplete | None = ...,
        topSize: int = ...,
        isCFF2: Incomplete | None = ...,
    ) -> None: ...
    def produceItem(self, index, data, file, offset): ...
    def toXML(self, xmlWriter) -> None: ...

class FDArrayIndex(Index):
    compilerClass: Incomplete
    def toXML(self, xmlWriter) -> None: ...
    def produceItem(self, index, data, file, offset): ...
    def fromXML(self, name, attrs, content) -> None: ...

class VarStoreData:
    file: Incomplete
    data: Incomplete
    otVarStore: Incomplete
    font: Incomplete
    def __init__(
        self, file: Incomplete | None = ..., otVarStore: Incomplete | None = ...
    ) -> None: ...
    def decompile(self): ...
    def compile(self) -> None: ...
    def writeXML(self, xmlWriter, name) -> None: ...
    def xmlRead(self, name, attrs, content, parent) -> None: ...
    def __len__(self) -> int: ...
    def getNumRegions(self, vsIndex): ...

class FDSelect:
    format: Incomplete
    gidArray: Incomplete
    def __init__(
        self,
        file: Incomplete | None = ...,
        numGlyphs: Incomplete | None = ...,
        format: Incomplete | None = ...,
    ) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index): ...
    def __setitem__(self, index, fdSelectValue) -> None: ...
    def append(self, fdSelectValue) -> None: ...

class CharStrings:
    globalSubrs: Incomplete
    varStore: Incomplete
    charStringsIndex: Incomplete
    charStrings: Incomplete
    charStringsAreIndexed: int
    private: Incomplete
    fdSelect: Incomplete
    fdArray: Incomplete
    def __init__(
        self,
        file,
        charset,
        globalSubrs,
        private,
        fdSelect,
        fdArray,
        isCFF2: Incomplete | None = ...,
        varStore: Incomplete | None = ...,
    ) -> None: ...
    def keys(self): ...
    def values(self): ...
    def has_key(self, name): ...
    __contains__: Incomplete
    def __len__(self) -> int: ...
    def __getitem__(self, name): ...
    def __setitem__(self, name, charString) -> None: ...
    def getItemAndSelector(self, name): ...
    def toXML(self, xmlWriter) -> None: ...
    def fromXML(self, name, attrs, content) -> None: ...

def readCard8(file): ...
def readCard16(file): ...
def readCard32(file): ...
def writeCard8(file, value) -> None: ...
def writeCard16(file, value) -> None: ...
def writeCard32(file, value) -> None: ...
def packCard8(value): ...
def packCard16(value): ...
def packCard32(value): ...
def buildOperatorDict(table): ...
def buildOpcodeDict(table): ...
def buildOrder(table): ...
def buildDefaults(table): ...
def buildConverters(table): ...

class SimpleConverter:
    def read(self, parent, value): ...
    def write(self, parent, value): ...
    def xmlWrite(self, xmlWriter, name, value) -> None: ...
    def xmlRead(self, name, attrs, content, parent): ...

class ASCIIConverter(SimpleConverter):
    def write(self, parent, value): ...
    def xmlWrite(self, xmlWriter, name, value) -> None: ...
    def xmlRead(self, name, attrs, content, parent): ...

class Latin1Converter(SimpleConverter):
    def write(self, parent, value): ...
    def xmlWrite(self, xmlWriter, name, value) -> None: ...
    def xmlRead(self, name, attrs, content, parent): ...

def parseNum(s): ...
def parseBlendList(s): ...

class NumberConverter(SimpleConverter):
    def xmlWrite(self, xmlWriter, name, value) -> None: ...
    def xmlRead(self, name, attrs, content, parent): ...

class ArrayConverter(SimpleConverter):
    def xmlWrite(self, xmlWriter, name, value) -> None: ...
    def xmlRead(self, name, attrs, content, parent): ...

class TableConverter(SimpleConverter):
    def xmlWrite(self, xmlWriter, name, value) -> None: ...
    def xmlRead(self, name, attrs, content, parent): ...

class PrivateDictConverter(TableConverter):
    def getClass(self): ...
    def write(self, parent, value): ...

class SubrsConverter(TableConverter):
    def getClass(self): ...
    def write(self, parent, value): ...

class CharStringsConverter(TableConverter):
    def write(self, parent, value): ...
    def xmlRead(self, name, attrs, content, parent): ...

class CharsetConverter(SimpleConverter):
    def write(self, parent, value): ...
    def xmlWrite(self, xmlWriter, name, value) -> None: ...
    def xmlRead(self, name, attrs, content, parent) -> None: ...

class CharsetCompiler:
    data: Incomplete
    parent: Incomplete
    def __init__(self, strings, charset, parent) -> None: ...
    def setPos(self, pos, endPos) -> None: ...
    def getDataLength(self): ...
    def toFile(self, file) -> None: ...

def getStdCharSet(charset): ...
def getCIDfromName(name, strings): ...
def getSIDfromName(name, strings): ...
def packCharset0(charset, isCID, strings): ...
def packCharset(charset, isCID, strings): ...
def parseCharset0(numGlyphs, file, strings, isCID): ...
def parseCharset(numGlyphs, file, strings, isCID, fmt): ...

class EncodingCompiler:
    data: Incomplete
    parent: Incomplete
    def __init__(self, strings, encoding, parent) -> None: ...
    def setPos(self, pos, endPos) -> None: ...
    def getDataLength(self): ...
    def toFile(self, file) -> None: ...

class EncodingConverter(SimpleConverter):
    def write(self, parent, value): ...
    def xmlWrite(self, xmlWriter, name, value) -> None: ...
    def xmlRead(self, name, attrs, content, parent): ...

def parseEncoding0(charset, file, haveSupplement, strings): ...
def parseEncoding1(charset, file, haveSupplement, strings): ...
def packEncoding0(charset, encoding, strings): ...
def packEncoding1(charset, encoding, strings): ...

class FDArrayConverter(TableConverter):
    def write(self, parent, value): ...
    def xmlRead(self, name, attrs, content, parent): ...

class FDSelectConverter(SimpleConverter):
    def write(self, parent, value): ...
    def xmlWrite(self, xmlWriter, name, value) -> None: ...
    def xmlRead(self, name, attrs, content, parent): ...

class VarStoreConverter(SimpleConverter):
    def write(self, parent, value): ...
    def xmlWrite(self, xmlWriter, name, value) -> None: ...
    def xmlRead(self, name, attrs, content, parent): ...

def packFDSelect0(fdSelectArray): ...
def packFDSelect3(fdSelectArray): ...
def packFDSelect4(fdSelectArray): ...

class FDSelectCompiler:
    data: Incomplete
    parent: Incomplete
    def __init__(self, fdSelect, parent) -> None: ...
    def setPos(self, pos, endPos) -> None: ...
    def getDataLength(self): ...
    def toFile(self, file) -> None: ...

class VarStoreCompiler:
    parent: Incomplete
    data: Incomplete
    def __init__(self, varStoreData, parent) -> None: ...
    def setPos(self, pos, endPos) -> None: ...
    def getDataLength(self): ...
    def toFile(self, file) -> None: ...

class ROSConverter(SimpleConverter):
    def xmlWrite(self, xmlWriter, name, value) -> None: ...
    def xmlRead(self, name, attrs, content, parent): ...

topDictOperators: Incomplete
topDictOperators2: Incomplete
kBlendDictOpName: str
blendOp: int
privateDictOperators: Incomplete
privateDictOperators2: Incomplete

def addConverters(table) -> None: ...

class TopDictDecompiler(psCharStrings.DictDecompiler):
    operators: Incomplete

class PrivateDictDecompiler(psCharStrings.DictDecompiler):
    operators: Incomplete

class DictCompiler:
    maxBlendStack: int
    isCFF2: Incomplete
    dictObj: Incomplete
    strings: Incomplete
    parent: Incomplete
    rawDict: Incomplete
    def __init__(
        self, dictObj, strings, parent, isCFF2: Incomplete | None = ...
    ) -> None: ...
    def setPos(self, pos, endPos) -> None: ...
    def getDataLength(self): ...
    def compile(self, reason): ...
    def toFile(self, file) -> None: ...
    def arg_number(self, num): ...
    def arg_SID(self, s): ...
    def arg_array(self, value): ...
    def arg_delta(self, value): ...
    def arg_delta_blend(self, value): ...

def encodeNumber(num): ...

class TopDictCompiler(DictCompiler):
    opcodes: Incomplete
    def getChildren(self, strings): ...

class FontDictCompiler(DictCompiler):
    opcodes: Incomplete
    def __init__(
        self, dictObj, strings, parent, isCFF2: Incomplete | None = ...
    ) -> None: ...
    def getChildren(self, strings): ...

class PrivateDictCompiler(DictCompiler):
    maxBlendStack: Incomplete
    opcodes: Incomplete
    pos: Incomplete
    def setPos(self, pos, endPos) -> None: ...
    def getChildren(self, strings): ...

class BaseDict:
    rawDict: Incomplete
    skipNames: Incomplete
    strings: Incomplete
    file: Incomplete
    offset: Incomplete
    def __init__(
        self,
        strings: Incomplete | None = ...,
        file: Incomplete | None = ...,
        offset: Incomplete | None = ...,
        isCFF2: Incomplete | None = ...,
    ) -> None: ...
    def decompile(self, data) -> None: ...
    def postDecompile(self) -> None: ...
    def getCompiler(self, strings, parent, isCFF2: Incomplete | None = ...): ...
    def __getattr__(self, name): ...
    def toXML(self, xmlWriter) -> None: ...
    def fromXML(self, name, attrs, content) -> None: ...

class TopDict(BaseDict):
    defaults: Incomplete
    converters: Incomplete
    compilerClass: Incomplete
    order: Incomplete
    decompilerClass: Incomplete
    cff2GetGlyphOrder: Incomplete
    GlobalSubrs: Incomplete
    charset: Incomplete
    def __init__(
        self,
        strings: Incomplete | None = ...,
        file: Incomplete | None = ...,
        offset: Incomplete | None = ...,
        GlobalSubrs: Incomplete | None = ...,
        cff2GetGlyphOrder: Incomplete | None = ...,
        isCFF2: Incomplete | None = ...,
    ) -> None: ...
    def getGlyphOrder(self): ...
    numGlyphs: Incomplete
    def postDecompile(self) -> None: ...
    skipNames: Incomplete
    def toXML(self, xmlWriter) -> None: ...
    def decompileAllCharStrings(self) -> None: ...
    FontBBox: Incomplete
    def recalcFontBBox(self) -> None: ...

class FontDict(BaseDict):
    defaults: Incomplete
    converters: Incomplete
    compilerClass: Incomplete
    orderCFF: Incomplete
    orderCFF2: Incomplete
    decompilerClass: Incomplete
    vstore: Incomplete
    def __init__(
        self,
        strings: Incomplete | None = ...,
        file: Incomplete | None = ...,
        offset: Incomplete | None = ...,
        GlobalSubrs: Incomplete | None = ...,
        isCFF2: Incomplete | None = ...,
        vstore: Incomplete | None = ...,
    ) -> None: ...
    order: Incomplete
    def setCFF2(self, isCFF2) -> None: ...

class PrivateDict(BaseDict):
    defaults: Incomplete
    converters: Incomplete
    order: Incomplete
    decompilerClass: Incomplete
    compilerClass: Incomplete
    vstore: Incomplete
    nominalWidthX: Incomplete
    def __init__(
        self,
        strings: Incomplete | None = ...,
        file: Incomplete | None = ...,
        offset: Incomplete | None = ...,
        isCFF2: Incomplete | None = ...,
        vstore: Incomplete | None = ...,
    ) -> None: ...
    @property
    def in_cff2(self): ...
    def getNumRegions(self, vi: Incomplete | None = ...): ...

class IndexedStrings:
    strings: Incomplete
    def __init__(self, file: Incomplete | None = ...) -> None: ...
    def getCompiler(self): ...
    def __len__(self) -> int: ...
    def __getitem__(self, SID): ...
    def getSID(self, s): ...
    def getStrings(self): ...
    stringMapping: Incomplete
    def buildStringMapping(self) -> None: ...

cffStandardStrings: Incomplete
cffStandardStringCount: int
cffStandardStringMapping: Incomplete
cffISOAdobeStrings: Incomplete
cffISOAdobeStringCount: int
cffIExpertStrings: Incomplete
cffExpertStringCount: int
cffExpertSubsetStrings: Incomplete
cffExpertSubsetStringCount: int
