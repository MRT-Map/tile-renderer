from _typeshed import Incomplete
from fontTools.misc.roundTools import noRound as noRound
from fontTools.misc.roundTools import otRound as otRound
from fontTools.varLib.builder import buildVarData as buildVarData
from fontTools.varLib.builder import buildVarRegion as buildVarRegion
from fontTools.varLib.builder import buildVarRegionList as buildVarRegionList
from fontTools.varLib.builder import buildVarStore as buildVarStore
from fontTools.varLib.models import supportScalar as supportScalar

NO_VARIATION_INDEX: Incomplete

class OnlineVarStoreBuilder:
    def __init__(self, axisTags) -> None: ...
    def setModel(self, model) -> None: ...
    def setSupports(self, supports) -> None: ...
    def finish(self, optimize: bool = ...): ...
    def storeMasters(self, master_values): ...
    def storeDeltas(self, deltas, *, round=...): ...

def VarData_addItem(self, deltas, *, round=...) -> None: ...
def VarRegion_get_support(self, fvar_axes): ...
def VarStore___bool__(self): ...

class VarStoreInstancer:
    fvar_axes: Incomplete
    def __init__(self, varstore, fvar_axes, location=...) -> None: ...
    location: Incomplete
    def setLocation(self, location) -> None: ...
    @staticmethod
    def interpolateFromDeltasAndScalars(deltas, scalars): ...
    def __getitem__(self, varidx): ...
    def interpolateFromDeltas(self, varDataIndex, deltas): ...

def VarStore_subset_varidxes(
    self, varIdxes, optimize: bool = ..., retainFirstMap: bool = ..., advIdxes=...
): ...
def VarStore_prune_regions(self) -> None: ...
def Object_collect_device_varidxes(self, varidxes) -> None: ...
def Object_remap_device_varidxes(self, varidxes_map) -> None: ...

class _Encoding:
    chars: Incomplete
    width: Incomplete
    overhead: Incomplete
    items: Incomplete
    def __init__(self, chars) -> None: ...
    def append(self, row) -> None: ...
    def extend(self, lst) -> None: ...
    def get_room(self): ...
    room: Incomplete
    @property
    def gain(self): ...
    def sort_key(self): ...
    def __len__(self) -> int: ...
    def can_encode(self, chars): ...
    def __sub__(self, other): ...

class _EncodingDict(dict):
    def __missing__(self, chars): ...
    def add_row(self, row) -> None: ...

def VarStore_optimize(self, use_NO_VARIATION_INDEX: bool = ...): ...
def main(args: Incomplete | None = ...) -> None: ...
