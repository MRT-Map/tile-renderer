from _typeshed import Incomplete

def normalizeValue(v, triple, extrapolate: bool = ...): ...
def normalizeLocation(location, axes, extrapolate: bool = ...): ...
def supportScalar(
    location,
    support,
    ot: bool = ...,
    extrapolate: bool = ...,
    axisRanges: Incomplete | None = ...,
): ...

class VariationModel:
    origLocations: Incomplete
    axisOrder: Incomplete
    extrapolate: Incomplete
    axisRanges: Incomplete
    locations: Incomplete
    mapping: Incomplete
    reverseMapping: Incomplete
    def __init__(
        self, locations, axisOrder: Incomplete | None = ..., extrapolate: bool = ...
    ) -> None: ...
    def getSubModel(self, items): ...
    @staticmethod
    def computeAxisRanges(locations): ...
    @staticmethod
    def getMasterLocationsSortKeyFunc(locations, axisOrder=...): ...
    def reorderMasters(self, master_list, mapping): ...
    def getDeltas(self, masterValues, *, round=...): ...
    def getDeltasAndSupports(self, items, *, round=...): ...
    def getScalars(self, loc): ...
    @staticmethod
    def interpolateFromDeltasAndScalars(deltas, scalars): ...
    def interpolateFromDeltas(self, loc, deltas): ...
    def interpolateFromMasters(self, loc, masterValues, *, round=...): ...
    def interpolateFromMastersAndScalars(self, masterValues, scalars, *, round=...): ...
