from enum import IntEnum
from typing import Dict, Iterable, Mapping, Optional, Sequence, Tuple, Union

from _typeshed import Incomplete
from fontTools import subset as subset
from fontTools import varLib as varLib
from fontTools.misc.cliTools import makeOutputFileName as makeOutputFileName
from fontTools.misc.fixedTools import floatToFixedToFloat as floatToFixedToFloat
from fontTools.misc.fixedTools import otRound as otRound
from fontTools.misc.fixedTools import strToFixedToFloat as strToFixedToFloat
from fontTools.ttLib import TTFont as TTFont
from fontTools.ttLib.tables.TupleVariation import TupleVariation as TupleVariation
from fontTools.varLib import builder as builder
from fontTools.varLib.instancer import names as names
from fontTools.varLib.instancer import solver as solver
from fontTools.varLib.merger import MutatorMerger as MutatorMerger
from fontTools.varLib.models import normalizeValue as normalizeValue
from fontTools.varLib.models import piecewiseLinearMap as piecewiseLinearMap
from fontTools.varLib.models import supportScalar as supportScalar
from fontTools.varLib.mvar import MVAR_ENTRIES as MVAR_ENTRIES

log: Incomplete

def AxisRange(minimum, maximum): ...
def NormalizedAxisRange(minimum, maximum): ...

class AxisTriple(Sequence):
    minimum: float
    default: Optional[float]
    maximum: float
    def __post_init__(self) -> None: ...
    def __getitem__(self, i): ...
    def __len__(self) -> int: ...
    @classmethod
    def expand(
        cls,
        v: Union["AxisTriple", float, Tuple[float, float], Tuple[float, float, float]],
    ) -> AxisTriple: ...
    def populateDefault(self, fvarAxisDefault) -> AxisTriple: ...
    def __init__(self, minimum, default, maximum) -> None: ...
    def __lt__(self, other): ...
    def __gt__(self, other): ...
    def __le__(self, other): ...
    def __ge__(self, other): ...

class NormalizedAxisTriple(AxisTriple):
    minimum: float
    default: float
    maximum: float
    def __post_init__(self) -> None: ...
    def __init__(self, minimum, default, maximum) -> None: ...
    def __lt__(self, other): ...
    def __gt__(self, other): ...
    def __le__(self, other): ...
    def __ge__(self, other): ...

class _BaseAxisLimits(Mapping[str, AxisTriple]):
    def __getitem__(self, key: str) -> AxisTriple: ...
    def __iter__(self) -> Iterable[str]: ...
    def __len__(self) -> int: ...
    def pinnedLocation(self) -> Dict[str, float]: ...

class AxisLimits(_BaseAxisLimits):
    have_defaults: bool
    def __init__(self, *args, **kwargs) -> None: ...
    def populateDefaults(self, varfont) -> AxisLimits: ...
    def normalize(self, varfont, usingAvar: bool = ...) -> NormalizedAxisLimits: ...

class NormalizedAxisLimits(_BaseAxisLimits):
    def __init__(self, *args, **kwargs) -> None: ...

class OverlapMode(IntEnum):
    KEEP_AND_DONT_SET_FLAGS: int
    KEEP_AND_SET_FLAGS: int
    REMOVE: int
    REMOVE_AND_IGNORE_ERRORS: int

def instantiateTupleVariationStore(
    variations,
    axisLimits,
    origCoords: Incomplete | None = ...,
    endPts: Incomplete | None = ...,
): ...
def changeTupleVariationsAxisLimits(variations, axisLimits): ...
def changeTupleVariationAxisLimit(var, axisTag, axisLimit): ...
def instantiateGvarGlyph(
    varfont, glyphname, axisLimits, optimize: bool = ...
) -> None: ...
def instantiateGvar(varfont, axisLimits, optimize: bool = ...): ...
def setCvarDeltas(cvt, deltas) -> None: ...
def instantiateCvar(varfont, axisLimits) -> None: ...
def setMvarDeltas(varfont, deltas) -> None: ...
def instantiateMVAR(varfont, axisLimits) -> None: ...
def instantiateHVAR(varfont, axisLimits): ...
def instantiateVVAR(varfont, axisLimits): ...

class _TupleVarStoreAdapter:
    regions: Incomplete
    axisOrder: Incomplete
    tupleVarData: Incomplete
    itemCounts: Incomplete
    def __init__(self, regions, axisOrder, tupleVarData, itemCounts) -> None: ...
    @classmethod
    def fromItemVarStore(cls, itemVarStore, fvarAxes): ...
    def rebuildRegions(self) -> None: ...
    def instantiate(self, axisLimits): ...
    def asItemVarStore(self): ...

def instantiateItemVariationStore(itemVarStore, fvarAxes, axisLimits): ...
def instantiateOTL(varfont, axisLimits) -> None: ...
def instantiateFeatureVariations(varfont, axisLimits) -> None: ...
def instantiateAvar(varfont, axisLimits) -> None: ...
def isInstanceWithinAxisRanges(location, axisRanges): ...
def instantiateFvar(varfont, axisLimits) -> None: ...
def instantiateSTAT(varfont, axisLimits) -> None: ...
def axisValuesFromAxisLimits(stat, axisLimits): ...
def setMacOverlapFlags(glyfTable) -> None: ...
def normalize(value, triple, avarMapping): ...
def sanityCheckVariableTables(varfont) -> None: ...
def instantiateVariableFont(
    varfont,
    axisLimits,
    inplace: bool = ...,
    optimize: bool = ...,
    overlap=...,
    updateFontNames: bool = ...,
): ...
def setRibbiBits(font) -> None: ...
def parseLimits(limits: Iterable[str]) -> Dict[str, Optional[AxisTriple]]: ...
def parseArgs(args): ...
def main(args: Incomplete | None = ...) -> None: ...
