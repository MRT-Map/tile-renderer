from _typeshed import Incomplete
from fontTools.pens.basePen import AbstractPen, DecomposingPen
from fontTools.pens.pointPen import AbstractPointPen

def replayRecording(recording, pen) -> None: ...

class RecordingPen(AbstractPen):
    value: Incomplete
    def __init__(self) -> None: ...
    def moveTo(self, p0) -> None: ...
    def lineTo(self, p1) -> None: ...
    def qCurveTo(self, *points) -> None: ...
    def curveTo(self, *points) -> None: ...
    def closePath(self) -> None: ...
    def endPath(self) -> None: ...
    def addComponent(self, glyphName, transformation) -> None: ...
    def replay(self, pen) -> None: ...

class DecomposingRecordingPen(DecomposingPen, RecordingPen):
    skipMissingComponents: bool

class RecordingPointPen(AbstractPointPen):
    value: Incomplete
    def __init__(self) -> None: ...
    def beginPath(self, identifier: Incomplete | None = ..., **kwargs) -> None: ...
    def endPath(self) -> None: ...
    def addPoint(
        self,
        pt,
        segmentType: Incomplete | None = ...,
        smooth: bool = ...,
        name: Incomplete | None = ...,
        identifier: Incomplete | None = ...,
        **kwargs
    ) -> None: ...
    def addComponent(
        self,
        baseGlyphName,
        transformation,
        identifier: Incomplete | None = ...,
        **kwargs
    ) -> None: ...
    def replay(self, pointPen) -> None: ...
