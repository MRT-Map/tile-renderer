from _typeshed import Incomplete
from fontTools.pens.basePen import AbstractPen as AbstractPen
from fontTools.pens.pointPen import AbstractPointPen as AbstractPointPen
from fontTools.pens.recordingPen import RecordingPen as RecordingPen

class _PassThruComponentsMixin:
    def addComponent(self, glyphName, transformation, **kwargs) -> None: ...

class FilterPen(_PassThruComponentsMixin, AbstractPen):
    def __init__(self, outPen) -> None: ...
    def moveTo(self, pt) -> None: ...
    def lineTo(self, pt) -> None: ...
    def curveTo(self, *points) -> None: ...
    def qCurveTo(self, *points) -> None: ...
    def closePath(self) -> None: ...
    def endPath(self) -> None: ...

class ContourFilterPen(_PassThruComponentsMixin, RecordingPen):
    def __init__(self, outPen) -> None: ...
    def closePath(self) -> None: ...
    def endPath(self) -> None: ...
    def filterContour(self, contour) -> None: ...

class FilterPointPen(_PassThruComponentsMixin, AbstractPointPen):
    def __init__(self, outPointPen) -> None: ...
    def beginPath(self, **kwargs) -> None: ...
    def endPath(self) -> None: ...
    def addPoint(
        self,
        pt,
        segmentType: Incomplete | None = ...,
        smooth: bool = ...,
        name: Incomplete | None = ...,
        **kwargs
    ) -> None: ...
