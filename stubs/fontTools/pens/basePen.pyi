from typing import Tuple

from _typeshed import Incomplete
from fontTools.misc.loggingTools import LogMixin

class PenError(Exception): ...
class OpenContourError(PenError): ...

class AbstractPen:
    def moveTo(self, pt: Tuple[float, float]) -> None: ...
    def lineTo(self, pt: Tuple[float, float]) -> None: ...
    def curveTo(self, *points: Tuple[float, float]) -> None: ...
    def qCurveTo(self, *points: Tuple[float, float]) -> None: ...
    def closePath(self) -> None: ...
    def endPath(self) -> None: ...
    def addComponent(
        self,
        glyphName: str,
        transformation: Tuple[float, float, float, float, float, float],
    ) -> None: ...

class NullPen(AbstractPen):
    def moveTo(self, pt) -> None: ...
    def lineTo(self, pt) -> None: ...
    def curveTo(self, *points) -> None: ...
    def qCurveTo(self, *points) -> None: ...
    def closePath(self) -> None: ...
    def endPath(self) -> None: ...
    def addComponent(self, glyphName, transformation) -> None: ...

class LoggingPen(LogMixin, AbstractPen): ...
class MissingComponentError(KeyError): ...

class DecomposingPen(LoggingPen):
    skipMissingComponents: bool
    glyphSet: Incomplete
    def __init__(self, glyphSet) -> None: ...
    def addComponent(self, glyphName, transformation) -> None: ...

class BasePen(DecomposingPen):
    def __init__(self, glyphSet: Incomplete | None = ...) -> None: ...
    def closePath(self) -> None: ...
    def endPath(self) -> None: ...
    def moveTo(self, pt) -> None: ...
    def lineTo(self, pt) -> None: ...
    def curveTo(self, *points) -> None: ...
    def qCurveTo(self, *points) -> None: ...

def decomposeSuperBezierSegment(points): ...
def decomposeQuadraticSegment(points): ...

class _TestPen(BasePen): ...
