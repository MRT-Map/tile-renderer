from _typeshed import Incomplete
from fontTools.ufoLib.utils import numberTypes as numberTypes

def isDictEnough(value): ...
def genericTypeValidator(value, typ): ...
def genericIntListValidator(values, validValues): ...
def genericNonNegativeIntValidator(value): ...
def genericNonNegativeNumberValidator(value): ...
def genericDictValidator(value, prototype): ...
def fontInfoStyleMapStyleNameValidator(value): ...
def fontInfoOpenTypeGaspRangeRecordsValidator(value): ...
def fontInfoOpenTypeHeadCreatedValidator(value): ...
def fontInfoOpenTypeNameRecordsValidator(value): ...
def fontInfoOpenTypeOS2WeightClassValidator(value): ...
def fontInfoOpenTypeOS2WidthClassValidator(value): ...
def fontInfoVersion2OpenTypeOS2PanoseValidator(values): ...
def fontInfoVersion3OpenTypeOS2PanoseValidator(values): ...
def fontInfoOpenTypeOS2FamilyClassValidator(values): ...
def fontInfoPostscriptBluesValidator(values): ...
def fontInfoPostscriptOtherBluesValidator(values): ...
def fontInfoPostscriptStemsValidator(values): ...
def fontInfoPostscriptWindowsCharacterSetValidator(value): ...
def fontInfoWOFFMetadataUniqueIDValidator(value): ...
def fontInfoWOFFMetadataVendorValidator(value): ...
def fontInfoWOFFMetadataCreditsValidator(value): ...
def fontInfoWOFFMetadataDescriptionValidator(value): ...
def fontInfoWOFFMetadataLicenseValidator(value): ...
def fontInfoWOFFMetadataTrademarkValidator(value): ...
def fontInfoWOFFMetadataCopyrightValidator(value): ...
def fontInfoWOFFMetadataLicenseeValidator(value): ...
def fontInfoWOFFMetadataTextValue(value): ...
def fontInfoWOFFMetadataExtensionsValidator(value): ...
def fontInfoWOFFMetadataExtensionValidator(value): ...
def fontInfoWOFFMetadataExtensionItemValidator(value): ...
def fontInfoWOFFMetadataExtensionNameValidator(value): ...
def fontInfoWOFFMetadataExtensionValueValidator(value): ...
def guidelinesValidator(value, identifiers: Incomplete | None = ...): ...
def guidelineValidator(value): ...
def anchorsValidator(value, identifiers: Incomplete | None = ...): ...
def anchorValidator(value): ...
def identifierValidator(value): ...
def colorValidator(value): ...

pngSignature: bytes

def imageValidator(value): ...
def pngValidator(
    path: Incomplete | None = ...,
    data: Incomplete | None = ...,
    fileObj: Incomplete | None = ...,
): ...
def layerContentsValidator(value, ufoPathOrFileSystem): ...
def groupsValidator(value): ...
def kerningValidator(data): ...
def fontLibValidator(value): ...
def glyphLibValidator(value): ...
