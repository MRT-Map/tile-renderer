from collections.abc import Generator

from _typeshed import Incomplete
from fontTools import ttLib as ttLib
from fontTools.ttLib.tables._c_m_a_p import cmap_classes as cmap_classes
from fontTools.ttLib.tables.otBase import ValueRecord as ValueRecord
from fontTools.ttLib.tables.otBase import valueRecordFormatDict as valueRecordFormatDict

class MtiLibError(Exception): ...
class ReferenceNotFoundError(MtiLibError): ...
class FeatureNotFoundError(ReferenceNotFoundError): ...
class LookupNotFoundError(ReferenceNotFoundError): ...

log: Incomplete

def makeGlyph(s): ...
def makeGlyphs(l): ...
def mapLookup(sym, mapping): ...
def mapFeature(sym, mapping): ...
def setReference(mapper, mapping, sym, setter, collection, key): ...

class DeferredMapping(dict):
    def __init__(self) -> None: ...
    def addDeferredMapping(self, setter, sym, e) -> None: ...
    def applyDeferredMappings(self) -> None: ...

def parseScriptList(lines, featureMap: Incomplete | None = ...): ...
def parseFeatureList(
    lines, lookupMap: Incomplete | None = ..., featureMap: Incomplete | None = ...
): ...
def parseLookupFlags(lines): ...
def parseSingleSubst(lines, font, _lookupMap: Incomplete | None = ...): ...
def parseMultiple(lines, font, _lookupMap: Incomplete | None = ...): ...
def parseAlternate(lines, font, _lookupMap: Incomplete | None = ...): ...
def parseLigature(lines, font, _lookupMap: Incomplete | None = ...): ...
def parseSinglePos(lines, font, _lookupMap: Incomplete | None = ...): ...
def parsePair(lines, font, _lookupMap: Incomplete | None = ...): ...
def parseKernset(lines, font, _lookupMap: Incomplete | None = ...): ...
def makeAnchor(data, klass=...): ...
def parseCursive(lines, font, _lookupMap: Incomplete | None = ...): ...
def makeMarkRecords(data, coverage, c): ...
def makeBaseRecords(data, coverage, c, classCount): ...
def makeLigatureRecords(data, coverage, c, classCount): ...
def parseMarkToSomething(lines, font, c): ...

class MarkHelper:
    def __init__(self) -> None: ...

class MarkToBaseHelper(MarkHelper):
    Mark: str
    Base: str
    Type: Incomplete

class MarkToMarkHelper(MarkHelper):
    Mark: str
    Base: str
    Type: Incomplete

class MarkToLigatureHelper(MarkHelper):
    Mark: str
    Base: str
    Type: Incomplete

def parseMarkToBase(lines, font, _lookupMap: Incomplete | None = ...): ...
def parseMarkToMark(lines, font, _lookupMap: Incomplete | None = ...): ...
def parseMarkToLigature(lines, font, _lookupMap: Incomplete | None = ...): ...
def stripSplitComma(line): ...
def intSplitComma(line): ...

class ContextHelper:
    Typ: Incomplete
    Type: Incomplete
    Chain: Incomplete
    ChainTyp: Incomplete
    InputIdx: Incomplete
    DataLen: Incomplete
    LookupRecord: Incomplete
    Coverage: Incomplete
    ContextData: Incomplete
    SetContextData: Incomplete
    RuleData: Incomplete
    SetRuleData: Incomplete
    Rule: Incomplete
    RuleCount: Incomplete
    RuleSet: Incomplete
    RuleSetCount: Incomplete
    Intersect: Incomplete
    ClassDef: Incomplete
    ClassDefIndex: Incomplete
    Input: Incomplete
    def __init__(self, klassName, Format) -> None: ...

def parseLookupRecords(items, klassName, lookupMap: Incomplete | None = ...): ...
def makeClassDef(classDefs, font, klass=...): ...
def parseClassDef(lines, font, klass=...): ...
def makeCoverage(glyphs, font, klass=...): ...
def parseCoverage(lines, font, klass=...): ...
def bucketizeRules(self, c, rules, bucketKeys) -> None: ...
def parseContext(lines, font, Type, lookupMap: Incomplete | None = ...): ...
def parseContextSubst(lines, font, lookupMap: Incomplete | None = ...): ...
def parseContextPos(lines, font, lookupMap: Incomplete | None = ...): ...
def parseChainedSubst(lines, font, lookupMap: Incomplete | None = ...): ...
def parseChainedPos(lines, font, lookupMap: Incomplete | None = ...): ...
def parseReverseChainedSubst(lines, font, _lookupMap: Incomplete | None = ...): ...
def parseLookup(lines, tableTag, font, lookupMap: Incomplete | None = ...): ...
def parseGSUBGPOS(lines, font, tableTag): ...
def parseGSUB(lines, font): ...
def parseGPOS(lines, font): ...
def parseAttachList(lines, font): ...
def parseCaretList(lines, font): ...
def makeMarkFilteringSets(sets, font): ...
def parseMarkFilteringSets(lines, font): ...
def parseGDEF(lines, font): ...
def parseCmap(lines, font): ...
def parseCmapId(lines, field): ...
def parseTable(lines, font, tableTag: Incomplete | None = ...): ...

class Tokenizer:
    filename: Incomplete
    lines: Incomplete
    line: str
    lineno: int
    stoppers: Incomplete
    buffer: Incomplete
    def __init__(self, f) -> None: ...
    def __iter__(self): ...
    def __next__(self): ...
    def next(self): ...
    def peek(self): ...
    def peeks(self): ...
    def between(self, tag) -> Generator[None, None, None]: ...
    def until(self, tags) -> Generator[None, None, None]: ...
    def expect(self, s): ...
    def expectendswith(self, s): ...

def build(f, font, tableTag: Incomplete | None = ...): ...
def main(args: Incomplete | None = ..., font: Incomplete | None = ...) -> None: ...
